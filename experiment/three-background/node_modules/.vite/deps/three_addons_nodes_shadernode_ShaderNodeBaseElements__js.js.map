{
  "version": 3,
  "sources": ["../../three/examples/jsm/nodes/core/constants.js", "../../three/examples/jsm/nodes/core/NodeUtils.js", "../../three/examples/jsm/nodes/core/Node.js", "../../three/examples/jsm/nodes/core/VaryingNode.js", "../../three/examples/jsm/nodes/core/AttributeNode.js", "../../three/examples/jsm/nodes/core/BypassNode.js", "../../three/examples/jsm/nodes/core/CodeNode.js", "../../three/examples/jsm/nodes/core/ContextNode.js", "../../three/examples/jsm/nodes/core/TempNode.js", "../../three/examples/jsm/nodes/core/ExpressionNode.js", "../../three/examples/jsm/nodes/core/FunctionCallNode.js", "../../three/examples/jsm/nodes/core/FunctionNode.js", "../../three/examples/jsm/nodes/core/InstanceIndexNode.js", "../../three/examples/jsm/nodes/core/PropertyNode.js", "../../three/examples/jsm/nodes/core/InputNode.js", "../../three/examples/jsm/nodes/core/UniformNode.js", "../../three/examples/jsm/nodes/math/OperatorNode.js", "../../three/examples/jsm/nodes/core/VarNode.js", "../../three/examples/jsm/nodes/accessors/BufferNode.js", "../../three/examples/jsm/nodes/accessors/Object3DNode.js", "../../three/examples/jsm/nodes/accessors/CameraNode.js", "../../three/examples/jsm/nodes/accessors/ReferenceNode.js", "../../three/examples/jsm/nodes/accessors/MaterialReferenceNode.js", "../../three/examples/jsm/nodes/accessors/UVNode.js", "../../three/examples/jsm/nodes/accessors/TextureNode.js", "../../three/examples/jsm/nodes/core/NodeBuilder.js", "../../three/examples/jsm/nodes/utils/SplitNode.js", "../../three/examples/jsm/nodes/accessors/MaterialNode.js", "../../three/examples/jsm/nodes/accessors/ModelNode.js", "../../three/examples/jsm/nodes/math/MathNode.js", "../../three/examples/jsm/nodes/accessors/PositionNode.js", "../../three/examples/jsm/nodes/accessors/ModelViewProjectionNode.js", "../../three/examples/jsm/nodes/accessors/NormalNode.js", "../../three/examples/jsm/nodes/accessors/PointUVNode.js", "../../three/examples/jsm/nodes/accessors/StorageBufferNode.js", "../../three/examples/jsm/nodes/accessors/UserDataNode.js", "../../three/examples/jsm/nodes/display/FrontFacingNode.js", "../../three/examples/jsm/nodes/gpgpu/ComputeNode.js", "../../three/examples/jsm/nodes/math/CondNode.js", "../../three/examples/jsm/nodes/utils/ArrayElementNode.js", "../../three/examples/jsm/nodes/utils/ConvertNode.js", "../../three/examples/jsm/nodes/utils/JoinNode.js", "../../three/examples/jsm/nodes/core/ConstNode.js", "../../three/examples/jsm/nodes/shadernode/ShaderNode.js", "../../three/examples/jsm/nodes/shadernode/ShaderNodeBaseElements.js"],
  "sourcesContent": ["export const NodeShaderStage = {\n\tVertex: 'vertex',\n\tFragment: 'fragment'\n};\n\nexport const NodeUpdateType = {\n\tNone: 'none',\n\tFrame: 'frame',\n\tObject: 'object'\n};\n\nexport const NodeType = {\n\tBoolean: 'bool',\n\tInteger: 'int',\n\tFloat: 'float',\n\tVector2: 'vec2',\n\tVector3: 'vec3',\n\tVector4: 'vec4',\n\tMatrix3: 'mat3',\n\tMatrix4: 'mat4'\n};\n", "import { Color, Matrix3, Matrix4, Vector2, Vector3, Vector4 } from 'three';\n\nexport const getCacheKey = ( object ) => {\n\n\tlet cacheKey = '{';\n\n\tif ( object.isNode === true ) {\n\n\t\tcacheKey += `uuid:\"${ object.uuid }\",`;\n\n\t}\n\n\tfor ( const property of getNodesKeys( object ) ) {\n\n\t\tcacheKey += `${ property }:${ object[ property ].getCacheKey() },`;\n\n\t}\n\n\tcacheKey += '}';\n\n\treturn cacheKey;\n\n};\n\nexport const getNodesKeys = ( object ) => {\n\n\tconst props = [];\n\n\tfor ( const name in object ) {\n\n\t\tconst value = object[ name ];\n\n\t\tif ( value && value.isNode === true ) {\n\n\t\t\tprops.push( name );\n\n\t\t}\n\n\t}\n\n\treturn props;\n\n};\n\nexport const getValueType = ( value ) => {\n\n\tif ( typeof value === 'number' ) {\n\n\t\treturn 'float';\n\n\t} else if ( typeof value === 'boolean' ) {\n\n\t\treturn 'bool';\n\n\t} else if ( value?.isVector2 === true ) {\n\n\t\treturn 'vec2';\n\n\t} else if ( value?.isVector3 === true ) {\n\n\t\treturn 'vec3';\n\n\t} else if ( value?.isVector4 === true ) {\n\n\t\treturn 'vec4';\n\n\t} else if ( value?.isMatrix3 === true ) {\n\n\t\treturn 'mat3';\n\n\t} else if ( value?.isMatrix4 === true ) {\n\n\t\treturn 'mat4';\n\n\t} else if ( value?.isColor === true ) {\n\n\t\treturn 'color';\n\n\t}\n\n\treturn null;\n\n};\n\nexport const getValueFromType = ( type, ...params ) => {\n\n\tconst last4 = type?.slice( - 4 );\n\n\tif ( type === 'color' ) {\n\n\t\treturn new Color( ...params );\n\n\t} else if ( last4 === 'vec2' ) {\n\n\t\treturn new Vector2( ...params );\n\n\t} else if ( last4 === 'vec3' ) {\n\n\t\treturn new Vector3( ...params );\n\n\t} else if ( last4 === 'vec4' ) {\n\n\t\treturn new Vector4( ...params );\n\n\t} else if ( last4 === 'mat3' ) {\n\n\t\treturn new Matrix3( ...params );\n\n\t} else if ( last4 === 'mat4' ) {\n\n\t\treturn new Matrix4( ...params );\n\n\t} else if ( type === 'bool' ) {\n\n\t\treturn false;\n\n\t} else if ( ( type === 'float' ) || ( type === 'int' ) || ( type === 'uint' ) ) {\n\n\t\treturn 0;\n\n\t}\n\n\treturn null;\n\n};\n", "import { NodeUpdateType } from './constants.js';\nimport { getNodesKeys, getCacheKey } from './NodeUtils.js';\nimport { MathUtils } from 'three';\n\nlet _nodeId = 0;\n\nclass Node {\n\n\tconstructor( nodeType = null ) {\n\n\t\tthis.isNode = true;\n\n\t\tthis.nodeType = nodeType;\n\n\t\tthis.updateType = NodeUpdateType.None;\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tObject.defineProperty( this, 'id', { value: _nodeId ++ } );\n\n\t}\n\n\tget type() {\n\n\t\treturn this.constructor.name;\n\n\t}\n\n\tgetChildren() {\n\n\t\tconst children = [];\n\n\t\tfor ( const property in this ) {\n\n\t\t\tconst object = this[ property ];\n\n\t\t\tif ( Array.isArray( object ) === true ) {\n\n\t\t\t\tfor ( const child of object ) {\n\n\t\t\t\t\tif ( child?.isNode === true ) {\n\n\t\t\t\t\t\tchildren.push( child );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object?.isNode === true ) {\n\n\t\t\t\tchildren.push( object );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn children;\n\n\t}\n\n\tgetCacheKey() {\n\n\t\treturn getCacheKey( this );\n\n\t}\n\n\tgetHash( /*builder*/ ) {\n\n\t\treturn this.uuid;\n\n\t}\n\n\tgetUpdateType( /*builder*/ ) {\n\n\t\treturn this.updateType;\n\n\t}\n\n\tgetNodeType( /*builder*/ ) {\n\n\t\treturn this.nodeType;\n\n\t}\n\n\tgetConstructHash( /*builder*/ ) {\n\n\t\treturn this.uuid;\n\n\t}\n\n\tgetReference( builder ) {\n\n\t\tconst hash = this.getHash( builder );\n\t\tconst nodeFromHash = builder.getNodeFromHash( hash );\n\n\t\treturn nodeFromHash || this;\n\n\t}\n\n\tconstruct( builder ) {\n\n\t\tconst nodeProperties = builder.getNodeProperties( this );\n\n\t\tfor ( const childNode of this.getChildren() ) {\n\n\t\t\tnodeProperties[ '_node' + childNode.id ] = childNode;\n\n\t\t}\n\n\t\t// return a outputNode if exists\n\t\treturn null;\n\n\t}\n\n\tanalyze( builder ) {\n\n\t\tconst nodeData = builder.getDataFromNode( this );\n\t\tnodeData.dependenciesCount = nodeData.dependenciesCount === undefined ? 1 : nodeData.dependenciesCount + 1;\n\n\t\tif ( nodeData.dependenciesCount === 1 ) {\n\n\t\t\t// node flow children\n\n\t\t\tconst nodeProperties = builder.getNodeProperties( this );\n\n\t\t\tfor ( const childNode of Object.values( nodeProperties ) ) {\n\n\t\t\t\tif ( childNode?.isNode === true ) {\n\n\t\t\t\t\tchildNode.build( builder );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst { outputNode } = builder.getNodeProperties( this );\n\n\t\tif ( outputNode?.isNode === true ) {\n\n\t\t\treturn outputNode.build( builder, output );\n\n\t\t}\n\n\t}\n\n\tupdate( /*frame*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tbuild( builder, output = null ) {\n\n\t\tconst refNode = this.getReference( builder );\n\n\t\tif ( this !== refNode ) {\n\n\t\t\treturn refNode.build( builder, output );\n\n\t\t}\n\n\t\tbuilder.addNode( this );\n\t\tbuilder.addStack( this );\n\n\t\t/* expected return:\n\t\t\t- \"construct\"\t-> Node\n\t\t\t- \"analyze\"\t\t-> null\n\t\t\t- \"generate\"\t-> String\n\t\t*/\n\t\tlet result = null;\n\n\t\tconst buildStage = builder.getBuildStage();\n\n\t\tif ( buildStage === 'construct' ) {\n\n\t\t\tconst properties = builder.getNodeProperties( this );\n\n\t\t\tif ( properties.initialized !== true || builder.context.tempRead === false ) {\n\n\t\t\t\tproperties.initialized = true;\n\t\t\t\tproperties.outputNode = this.construct( builder );\n\n\t\t\t\tfor ( const childNode of Object.values( properties ) ) {\n\n\t\t\t\t\tif ( childNode?.isNode === true ) {\n\n\t\t\t\t\t\tchildNode.build( builder );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( buildStage === 'analyze' ) {\n\n\t\t\tthis.analyze( builder );\n\n\t\t} else if ( buildStage === 'generate' ) {\n\n\t\t\tconst isGenerateOnce = this.generate.length === 1;\n\n\t\t\tif ( isGenerateOnce ) {\n\n\t\t\t\tconst type = this.getNodeType( builder );\n\t\t\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\t\t\tresult = nodeData.snippet;\n\n\t\t\t\tif ( result === undefined /*|| builder.context.tempRead === false*/ ) {\n\n\t\t\t\t\tresult = this.generate( builder ) || '';\n\n\t\t\t\t\tnodeData.snippet = result;\n\n\t\t\t\t}\n\n\t\t\t\tresult = builder.format( result, type, output );\n\n\t\t\t} else {\n\n\t\t\t\tresult = this.generate( builder, output ) || '';\n\n\t\t\t}\n\n\t\t}\n\n\t\tbuilder.removeStack( this );\n\n\t\treturn result;\n\n\t}\n\n\tserialize( json ) {\n\n\t\tconst nodeKeys = getNodesKeys( this );\n\n\t\tif ( nodeKeys.length > 0 ) {\n\n\t\t\tconst inputNodes = {};\n\n\t\t\tfor ( const property of nodeKeys ) {\n\n\t\t\t\tinputNodes[ property ] = this[ property ].toJSON( json.meta ).uuid;\n\n\t\t\t}\n\n\t\t\tjson.inputNodes = inputNodes;\n\n\t\t}\n\n\t}\n\n\tdeserialize( json ) {\n\n\t\tif ( json.inputNodes !== undefined ) {\n\n\t\t\tconst nodes = json.meta.nodes;\n\n\t\t\tfor ( const property in json.inputNodes ) {\n\n\t\t\t\tconst uuid = json.inputNodes[ property ];\n\n\t\t\t\tthis[ property ] = nodes[ uuid ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst { uuid, type } = this;\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t}\n\n\t\t// serialize\n\n\t\tlet data = meta.nodes[ uuid ];\n\n\t\tif ( data === undefined ) {\n\n\t\t\tdata = {\n\t\t\t\tuuid,\n\t\t\t\ttype,\n\t\t\t\tmeta,\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Node',\n\t\t\t\t\tgenerator: 'Node.toJSON'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tmeta.nodes[ data.uuid ] = data;\n\n\t\t\tthis.serialize( data );\n\n\t\t\tdelete data.meta;\n\n\t\t}\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst nodes = extractFromCache( meta.nodes );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\t\t\tif ( nodes.length > 0 ) data.nodes = nodes;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nexport default Node;\n", "import Node from './Node.js';\nimport { NodeShaderStage } from './constants.js';\n\nclass VaryingNode extends Node {\n\n\tconstructor( node, name = null ) {\n\n\t\tsuper();\n\n\t\tthis.node = node;\n\t\tthis.name = name;\n\n\t}\n\n\tgetHash( builder ) {\n\n\t\treturn this.name || super.getHash( builder );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\t// VaryingNode is auto type\n\n\t\treturn this.node.getNodeType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst type = this.getNodeType( builder );\n\t\tconst node = this.node;\n\t\tconst name = this.name;\n\n\t\tconst nodeVarying = builder.getVaryingFromNode( this, type );\n\n\t\tif ( name !== null ) {\n\n\t\t\tnodeVarying.name = name;\n\n\t\t}\n\n\t\tconst propertyName = builder.getPropertyName( nodeVarying, NodeShaderStage.Vertex );\n\n\t\t// force node run in vertex stage\n\t\tbuilder.flowNodeFromShaderStage( NodeShaderStage.Vertex, node, type, propertyName );\n\n\t\treturn builder.getPropertyName( nodeVarying );\n\n\t}\n\n}\n\nexport default VaryingNode;\n", "import Node from './Node.js';\nimport VaryingNode from './VaryingNode.js';\n\nclass AttributeNode extends Node {\n\n\tconstructor( attributeName, nodeType = null ) {\n\n\t\tsuper( nodeType );\n\n\t\tthis._attributeName = attributeName;\n\n\t}\n\n\tgetHash( builder ) {\n\n\t\treturn this.getAttributeName( builder );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tlet nodeType = super.getNodeType( builder );\n\n\t\tif ( nodeType === null ) {\n\n\t\t\tconst attributeName = this.getAttributeName( builder );\n\t\t\tconst attribute = builder.geometry.getAttribute( attributeName );\n\n\t\t\tnodeType = builder.getTypeFromLength( attribute.itemSize );\n\n\t\t}\n\n\t\treturn nodeType;\n\n\t}\n\n\tsetAttributeName( attributeName ) {\n\n\t\tthis._attributeName = attributeName;\n\n\t\treturn this;\n\n\t}\n\n\tgetAttributeName( /*builder*/ ) {\n\n\t\treturn this._attributeName;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst attribute = builder.getAttribute( this.getAttributeName( builder ), this.getNodeType( builder ) );\n\n\t\tif ( builder.isShaderStage( 'vertex' ) ) {\n\n\t\t\treturn attribute.name;\n\n\t\t} else {\n\n\t\t\tconst nodeVarying = new VaryingNode( this );\n\n\t\t\treturn nodeVarying.build( builder, attribute.type );\n\n\t\t}\n\n\t}\n\n}\n\nexport default AttributeNode;\n", "import Node from './Node.js';\n\nclass BypassNode extends Node {\n\n\tconstructor( returnNode, callNode ) {\n\n\t\tsuper();\n\n\t\tthis.isBypassNode = true;\n\n\t\tthis.outputNode = returnNode;\n\t\tthis.callNode = callNode;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.outputNode.getNodeType( builder );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst snippet = this.callNode.build( builder, 'void' );\n\n\t\tif ( snippet !== '' ) {\n\n\t\t\tbuilder.addFlowCode( snippet );\n\n\t\t}\n\n\t\treturn this.outputNode.build( builder, output );\n\n\t}\n\n}\n\nexport default BypassNode;\n", "import Node from './Node.js';\n\nclass CodeNode extends Node {\n\n\tconstructor( code = '', includes = [] ) {\n\n\t\tsuper( 'code' );\n\n\t\tthis.isCodeNode = true;\n\n\t\tthis.code = code;\n\n\t\tthis._includes = includes;\n\n\t}\n\n\tsetIncludes( includes ) {\n\n\t\tthis._includes = includes;\n\n\t\treturn this;\n\n\t}\n\n\tgetIncludes( /*builder*/ ) {\n\n\t\treturn this._includes;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst includes = this.getIncludes( builder );\n\n\t\tfor ( const include of includes ) {\n\n\t\t\tinclude.build( builder );\n\n\t\t}\n\n\t\tconst nodeCode = builder.getCodeFromNode( this, this.getNodeType( builder ) );\n\t\tnodeCode.code = this.code;\n\n\t\treturn nodeCode.code;\n\n\t}\n\n}\n\nexport default CodeNode;\n", "import Node from './Node.js';\n\nclass ContextNode extends Node {\n\n\tconstructor( node, context = {} ) {\n\n\t\tsuper();\n\n\t\tthis.isContextNode = true;\n\n\t\tthis.node = node;\n\t\tthis.context = context;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.node.getNodeType( builder );\n\n\t}\n\n\tconstruct( builder ) {\n\n\t\tconst previousContext = builder.getContext();\n\n\t\tbuilder.setContext( { ...builder.context, ...this.context } );\n\n\t\tconst node = this.node.build( builder );\n\n\t\tbuilder.setContext( previousContext );\n\n\t\treturn node;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst previousContext = builder.getContext();\n\n\t\tbuilder.setContext( { ...builder.context, ...this.context } );\n\n\t\tconst snippet = this.node.build( builder, output );\n\n\t\tbuilder.setContext( previousContext );\n\n\t\treturn snippet;\n\n\t}\n\n}\n\nexport default ContextNode;\n", "import Node from './Node.js';\n\nclass TempNode extends Node {\n\n\tconstructor( type ) {\n\n\t\tsuper( type );\n\n\t\tthis.isTempNode = true;\n\n\t}\n\n\tbuild( builder, output ) {\n\n\t\tconst buildStage = builder.getBuildStage();\n\n\t\tif ( buildStage === 'generate' ) {\n\n\t\t\tconst type = builder.getVectorType( this.getNodeType( builder, output ) );\n\t\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\t\tif ( builder.context.tempRead !== false && nodeData.propertyName !== undefined ) {\n\n\t\t\t\treturn builder.format( nodeData.propertyName, type, output );\n\n\t\t\t} else if ( builder.context.tempWrite !== false && type !== 'void ' && output !== 'void' && nodeData.dependenciesCount > 1 ) {\n\n\t\t\t\tconst snippet = super.build( builder, type );\n\n\t\t\t\tconst nodeVar = builder.getVarFromNode( this, type );\n\t\t\t\tconst propertyName = builder.getPropertyName( nodeVar );\n\n\t\t\t\tbuilder.addFlowCode( `${propertyName} = ${snippet}` );\n\n\t\t\t\tnodeData.snippet = snippet;\n\t\t\t\tnodeData.propertyName = propertyName;\n\n\t\t\t\treturn builder.format( nodeData.propertyName, type, output );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn super.build( builder, output );\n\n\t}\n\n}\n\nexport default TempNode;\n", "import TempNode from './TempNode.js';\n\nclass ExpressionNode extends TempNode {\n\n\tconstructor( snipped = '', nodeType = 'void' ) {\n\n\t\tsuper( nodeType );\n\n\t\tthis.snipped = snipped;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst type = this.getNodeType( builder );\n\t\tconst snipped = this.snipped;\n\n\t\tif ( type === 'void' ) {\n\n\t\t\tbuilder.addFlowCode( snipped );\n\n\t\t} else {\n\n\t\t\treturn `( ${ snipped } )`;\n\n\t\t}\n\n\t}\n\n}\n\nexport default ExpressionNode;\n", "import TempNode from './TempNode.js';\n\nclass FunctionCallNode extends TempNode {\n\n\tconstructor( functionNode = null, parameters = {} ) {\n\n\t\tsuper();\n\n\t\tthis.functionNode = functionNode;\n\t\tthis.parameters = parameters;\n\n\t}\n\n\tsetParameters( parameters ) {\n\n\t\tthis.parameters = parameters;\n\n\t\treturn this;\n\n\t}\n\n\tgetParameters() {\n\n\t\treturn this.parameters;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.functionNode.getNodeType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst params = [];\n\n\t\tconst functionNode = this.functionNode;\n\n\t\tconst inputs = functionNode.getInputs( builder );\n\t\tconst parameters = this.parameters;\n\n\t\tif ( Array.isArray( parameters ) ) {\n\n\t\t\tfor ( let i = 0; i < parameters.length; i ++ ) {\n\n\t\t\t\tconst inputNode = inputs[ i ];\n\t\t\t\tconst node = parameters[ i ];\n\n\t\t\t\tparams.push( node.build( builder, inputNode.type ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( const inputNode of inputs ) {\n\n\t\t\t\tconst node = parameters[ inputNode.name ];\n\n\t\t\t\tif ( node !== undefined ) {\n\n\t\t\t\t\tparams.push( node.build( builder, inputNode.type ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( `FunctionCallNode: Input '${inputNode.name}' not found in FunctionNode.` );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst functionName = functionNode.build( builder, 'property' );\n\n\t\treturn `${functionName}( ${params.join( ', ' )} )`;\n\n\t}\n\n}\n\nexport default FunctionCallNode;\n", "import CodeNode from './CodeNode.js';\nimport FunctionCallNode from './FunctionCallNode.js';\n\nclass FunctionNode extends CodeNode {\n\n\tconstructor( code = '', includes = [] ) {\n\n\t\tsuper( code, includes );\n\n\t\tthis.keywords = {};\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.getNodeFunction( builder ).type;\n\n\t}\n\n\tgetInputs( builder ) {\n\n\t\treturn this.getNodeFunction( builder ).inputs;\n\n\t}\n\n\tgetNodeFunction( builder ) {\n\n\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\tlet nodeFunction = nodeData.nodeFunction;\n\n\t\tif ( nodeFunction === undefined ) {\n\n\t\t\tnodeFunction = builder.parser.parseFunction( this.code );\n\n\t\t\tnodeData.nodeFunction = nodeFunction;\n\n\t\t}\n\n\t\treturn nodeFunction;\n\n\t}\n\n\tcall( parameters = {} ) {\n\n\t\treturn new FunctionCallNode( this, parameters );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tsuper.generate( builder );\n\n\t\tconst nodeFunction = this.getNodeFunction( builder );\n\n\t\tconst name = nodeFunction.name;\n\t\tconst type = nodeFunction.type;\n\n\t\tconst nodeCode = builder.getCodeFromNode( this, type );\n\n\t\tif ( name !== '' ) {\n\n\t\t\t// use a custom property name\n\n\t\t\tnodeCode.name = name;\n\n\t\t}\n\n\t\tconst propertyName = builder.getPropertyName( nodeCode );\n\n\t\tlet code = this.getNodeFunction( builder ).getCode( propertyName );\n\n\t\tconst keywords = this.keywords;\n\t\tconst keywordsProperties = Object.keys( keywords );\n\n\t\tif ( keywordsProperties.length > 0 ) {\n\n\t\t\tfor ( const property of keywordsProperties ) {\n\n\t\t\t\tconst propertyRegExp = new RegExp( `\\\\b${property}\\\\b`, 'g' );\n\t\t\t\tconst nodeProperty = keywords[ property ].build( builder, 'property' );\n\n\t\t\t\tcode = code.replace( propertyRegExp, nodeProperty );\n\n\t\t\t}\n\n\t\t}\n\n\t\tnodeCode.code = code;\n\n\t\tif ( output === 'property' ) {\n\n\t\t\treturn propertyName;\n\n\t\t} else {\n\n\t\t\treturn builder.format( `${ propertyName }()`, type, output );\n\n\t\t}\n\n\t}\n\n}\n\nexport default FunctionNode;\n", "import Node from './Node.js';\n\nclass InstanceIndexNode extends Node {\n\n\tconstructor() {\n\n\t\tsuper( 'uint' );\n\n\t\tthis.isInstanceIndexNode = true;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\treturn builder.getInstanceIndex();\n\n\t}\n\n}\n\nexport default InstanceIndexNode;\n", "import Node from './Node.js';\n\nclass PropertyNode extends Node {\n\n\tconstructor( name = null, nodeType = 'vec4' ) {\n\n\t\tsuper( nodeType );\n\n\t\tthis.name = name;\n\n\t}\n\n\tgetHash( builder ) {\n\n\t\treturn this.name || super.getHash( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst nodeVary = builder.getVarFromNode( this, this.getNodeType( builder ) );\n\t\tconst name = this.name;\n\n\t\tif ( name !== null ) {\n\n\t\t\tnodeVary.name = name;\n\n\t\t}\n\n\t\treturn builder.getPropertyName( nodeVary );\n\n\t}\n\n}\n\nexport default PropertyNode;\n", "import Node from './Node.js';\nimport { getValueType, getValueFromType } from './NodeUtils.js';\n\nclass InputNode extends Node {\n\n\tconstructor( value, nodeType = null ) {\n\n\t\tsuper( nodeType );\n\n\t\tthis.isInputNode = true;\n\n\t\tthis.value = value;\n\n\t}\n\n\tgetNodeType( /*builder*/ ) {\n\n\t\tif ( this.nodeType === null ) {\n\n\t\t\treturn getValueType( this.value );\n\n\t\t}\n\n\t\treturn this.nodeType;\n\n\t}\n\n\tgetInputType( builder ) {\n\n\t\treturn this.getNodeType( builder );\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.value = this.value?.toArray?.() || this.value;\n\t\tdata.valueType = getValueType( this.value );\n\t\tdata.nodeType = this.nodeType;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.nodeType = data.nodeType;\n\t\tthis.value = getValueFromType( data.valueType );\n\t\tthis.value = this.value?.fromArray?.( data.value ) || data.value;\n\n\t}\n\n\tgenerate( /*builder, output*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n}\n\nexport default InputNode;\n", "import InputNode from './InputNode.js';\n\nclass UniformNode extends InputNode {\n\n\tconstructor( value, nodeType = null ) {\n\n\t\tsuper( value, nodeType );\n\n\t\tthis.isUniformNode = true;\n\n\t}\n\n\tgetUniformHash( builder ) {\n\n\t\treturn this.getHash( builder );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getNodeType( builder );\n\n\t\tconst hash = this.getUniformHash( builder );\n\n\t\tlet sharedNode = builder.getNodeFromHash( hash );\n\n\t\tif ( sharedNode === undefined ) {\n\n\t\t\tbuilder.setHashNode( this, hash );\n\n\t\t\tsharedNode = this;\n\n\t\t}\n\n\t\tconst sharedNodeType = sharedNode.getInputType( builder );\n\n\t\tconst nodeUniform = builder.getUniformFromNode( sharedNode, builder.shaderStage, sharedNodeType );\n\t\tconst propertyName = builder.getPropertyName( nodeUniform );\n\n\t\treturn builder.format( propertyName, type, output );\n\n\t}\n\n}\n\nexport default UniformNode;\n", "import TempNode from '../core/TempNode.js';\n\nclass OperatorNode extends TempNode {\n\n\tconstructor( op, aNode, bNode, ...params ) {\n\n\t\tsuper();\n\n\t\tthis.op = op;\n\n\t\tif ( params.length > 0 ) {\n\n\t\t\tlet finalBNode = bNode;\n\n\t\t\tfor ( let i = 0; i < params.length; i ++ ) {\n\n\t\t\t\tfinalBNode = new OperatorNode( op, finalBNode, params[ i ] );\n\n\t\t\t}\n\n\t\t\tbNode = finalBNode;\n\n\t\t}\n\n\t\tthis.aNode = aNode;\n\t\tthis.bNode = bNode;\n\n\t}\n\n\tgetNodeType( builder, output ) {\n\n\t\tconst op = this.op;\n\n\t\tconst aNode = this.aNode;\n\t\tconst bNode = this.bNode;\n\n\t\tconst typeA = aNode.getNodeType( builder );\n\t\tconst typeB = bNode.getNodeType( builder );\n\n\t\tif ( typeA === 'void' || typeB === 'void' ) {\n\n\t\t\treturn 'void';\n\n\t\t} else if ( op === '=' || op === '%' ) {\n\n\t\t\treturn typeA;\n\n\t\t} else if ( op === '&' || op === '|' || op === '^' || op === '>>' || op === '<<' ) {\n\n\t\t\treturn 'int';\n\n\t\t} else if ( op === '==' || op === '&&' || op === '||' || op === '^^' ) {\n\n\t\t\treturn 'bool';\n\n\t\t} else if ( op === '<' || op === '>' || op === '<=' || op === '>=' ) {\n\n\t\t\tconst typeLength = builder.getTypeLength( output );\n\n\t\t\treturn typeLength > 1 ? `bvec${ typeLength }` : 'bool';\n\n\t\t} else {\n\n\t\t\tif ( typeA === 'float' && builder.isMatrix( typeB ) ) {\n\n\t\t\t\treturn typeB;\n\n\t\t\t} else if ( builder.isMatrix( typeA ) && builder.isVector( typeB ) ) {\n\n\t\t\t\t// matrix x vector\n\n\t\t\t\treturn builder.getVectorFromMatrix( typeA );\n\n\t\t\t} else if ( builder.isVector( typeA ) && builder.isMatrix( typeB ) ) {\n\n\t\t\t\t// vector x matrix\n\n\t\t\t\treturn builder.getVectorFromMatrix( typeB );\n\n\t\t\t} else if ( builder.getTypeLength( typeB ) > builder.getTypeLength( typeA ) ) {\n\n\t\t\t\t// anytype x anytype: use the greater length vector\n\n\t\t\t\treturn typeB;\n\n\t\t\t}\n\n\t\t\treturn typeA;\n\n\t\t}\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst op = this.op;\n\n\t\tconst aNode = this.aNode;\n\t\tconst bNode = this.bNode;\n\n\t\tconst type = this.getNodeType( builder, output );\n\n\t\tlet typeA = null;\n\t\tlet typeB = null;\n\n\t\tif ( type !== 'void' ) {\n\n\t\t\ttypeA = aNode.getNodeType( builder );\n\t\t\ttypeB = bNode.getNodeType( builder );\n\n\t\t\tif ( op === '=' ) {\n\n\t\t\t\ttypeB = typeA;\n\n\t\t\t} else if ( op === '<' || op === '>' || op === '<=' || op === '>=' ) {\n\n\t\t\t\tif ( builder.isVector( typeA ) ) {\n\n\t\t\t\t\ttypeB = typeA;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttypeA = typeB = 'float';\n\n\t\t\t\t}\n\n\t\t\t} else if ( builder.isMatrix( typeA ) && builder.isVector( typeB ) ) {\n\n\t\t\t\t// matrix x vector\n\n\t\t\t\ttypeB = builder.getVectorFromMatrix( typeA );\n\n\t\t\t} else if ( builder.isVector( typeA ) && builder.isMatrix( typeB ) ) {\n\n\t\t\t\t// vector x matrix\n\n\t\t\t\ttypeA = builder.getVectorFromMatrix( typeB );\n\n\t\t\t} else {\n\n\t\t\t\t// anytype x anytype\n\n\t\t\t\ttypeA = typeB = type;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\ttypeA = typeB = type;\n\n\t\t}\n\n\t\tconst a = aNode.build( builder, typeA );\n\t\tconst b = bNode.build( builder, typeB );\n\n\t\tconst outputLength = builder.getTypeLength( output );\n\n\t\tif ( output !== 'void' ) {\n\n\t\t\tif ( op === '=' ) {\n\n\t\t\t\tbuilder.addFlowCode( `${a} ${this.op} ${b}` );\n\n\t\t\t\treturn a;\n\n\t\t\t} else if ( op === '>' && outputLength > 1 ) {\n\n\t\t\t\treturn builder.format( `${ builder.getMethod( 'greaterThan' ) }( ${a}, ${b} )`, type, output );\n\n\t\t\t} else if ( op === '<=' && outputLength > 1 ) {\n\n\t\t\t\treturn builder.format( `${ builder.getMethod( 'lessThanEqual' ) }( ${a}, ${b} )`, type, output );\n\n\t\t\t} else {\n\n\t\t\t\treturn builder.format( `( ${a} ${this.op} ${b} )`, type, output );\n\n\t\t\t}\n\n\t\t} else if ( typeA !== 'void' ) {\n\n\t\t\treturn builder.format( `${a} ${this.op} ${b}`, type, output );\n\n\t\t}\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.op = this.op;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.op = data.op;\n\n\t}\n\n}\n\nexport default OperatorNode;\n", "import Node from './Node.js';\nimport OperatorNode from '../math/OperatorNode.js';\n\nclass VarNode extends Node {\n\n\tconstructor( node, name = null ) {\n\n\t\tsuper();\n\n\t\tthis.node = node;\n\t\tthis.name = name;\n\n\t}\n\n\top( op, ...params ) {\n\n\t\tthis.node = new OperatorNode( op, this.node, ...params );\n\n\t\treturn this;\n\n\t}\n\n\tassign( ...params ) {\n\n\t\treturn this.op( '=', ...params );\n\n\t}\n\n\tadd( ...params ) {\n\n\t\treturn this.op( '+', ...params );\n\n\t}\n\n\tsub( ...params ) {\n\n\t\treturn this.op( '-', ...params );\n\n\t}\n\n\tmul( ...params ) {\n\n\t\treturn this.op( '*', ...params );\n\n\t}\n\n\tdiv( ...params ) {\n\n\t\treturn this.op( '/', ...params );\n\n\t}\n\n\tgetHash( builder ) {\n\n\t\treturn this.name || super.getHash( builder );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.node.getNodeType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst node = this.node;\n\t\tconst name = this.name;\n\n\t\tif ( name === null && node.isTempNode === true ) {\n\n\t\t\treturn node.build( builder );\n\n\t\t}\n\n\t\tconst type = builder.getVectorType( this.getNodeType( builder ) );\n\n\t\tconst snippet = node.build( builder, type );\n\t\tconst nodeVar = builder.getVarFromNode( this, type );\n\n\t\tif ( name !== null ) {\n\n\t\t\tnodeVar.name = name;\n\n\t\t}\n\n\t\tconst propertyName = builder.getPropertyName( nodeVar );\n\n\t\tbuilder.addFlowCode( `${propertyName} = ${snippet}` );\n\n\t\treturn propertyName;\n\n\t}\n\n}\n\nexport default VarNode;\n", "import UniformNode from '../core/UniformNode.js';\n\nclass BufferNode extends UniformNode {\n\n\tconstructor( value, bufferType, bufferCount = 0 ) {\n\n\t\tsuper( value, bufferType );\n\n\t\tthis.isBufferNode = true;\n\n\t\tthis.bufferType = bufferType;\n\t\tthis.bufferCount = bufferCount;\n\n\t}\n\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'buffer';\n\n\t}\n\n}\n\nexport default BufferNode;\n", "import { Vector3 } from 'three';\nimport Node from '../core/Node.js';\nimport UniformNode from '../core/UniformNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\n\nclass Object3DNode extends Node {\n\n\tstatic VIEW_MATRIX = 'viewMatrix';\n\tstatic NORMAL_MATRIX = 'normalMatrix';\n\tstatic WORLD_MATRIX = 'worldMatrix';\n\tstatic POSITION = 'position';\n\tstatic VIEW_POSITION = 'viewPosition';\n\n\tconstructor( scope = Object3DNode.VIEW_MATRIX, object3d = null ) {\n\n\t\tsuper();\n\n\t\tthis.scope = scope;\n\t\tthis.object3d = object3d;\n\n\t\tthis.updateType = NodeUpdateType.Object;\n\n\t\tthis._uniformNode = new UniformNode( null );\n\n\t}\n\n\tgetNodeType() {\n\n\t\tconst scope = this.scope;\n\n\t\tif ( scope === Object3DNode.WORLD_MATRIX || scope === Object3DNode.VIEW_MATRIX ) {\n\n\t\t\treturn 'mat4';\n\n\t\t} else if ( scope === Object3DNode.NORMAL_MATRIX ) {\n\n\t\t\treturn 'mat3';\n\n\t\t} else if ( scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION ) {\n\n\t\t\treturn 'vec3';\n\n\t\t}\n\n\t}\n\n\tupdate( frame ) {\n\n\t\tconst object = this.object3d;\n\t\tconst uniformNode = this._uniformNode;\n\t\tconst scope = this.scope;\n\n\t\tif ( scope === Object3DNode.VIEW_MATRIX ) {\n\n\t\t\tuniformNode.value = object.modelViewMatrix;\n\n\t\t} else if ( scope === Object3DNode.NORMAL_MATRIX ) {\n\n\t\t\tuniformNode.value = object.normalMatrix;\n\n\t\t} else if ( scope === Object3DNode.WORLD_MATRIX ) {\n\n\t\t\tuniformNode.value = object.matrixWorld;\n\n\t\t} else if ( scope === Object3DNode.POSITION ) {\n\n\t\t\tuniformNode.value.setFromMatrixPosition( object.matrixWorld );\n\n\t\t} else if ( scope === Object3DNode.VIEW_POSITION ) {\n\n\t\t\tconst camera = frame.camera;\n\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\n\t\t\tuniformNode.value.setFromMatrixPosition( object.matrixWorld );\n\n\t\t\tuniformNode.value.applyMatrix4( camera.matrixWorldInverse );\n\n\t\t}\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst scope = this.scope;\n\n\t\tif ( scope === Object3DNode.WORLD_MATRIX || scope === Object3DNode.VIEW_MATRIX ) {\n\n\t\t\tthis._uniformNode.nodeType = 'mat4';\n\n\t\t} else if ( scope === Object3DNode.NORMAL_MATRIX ) {\n\n\t\t\tthis._uniformNode.nodeType = 'mat3';\n\n\t\t} else if ( scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION ) {\n\n\t\t\tthis._uniformNode.nodeType = 'vec3';\n\n\t\t}\n\n\t\treturn this._uniformNode.build( builder );\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.scope = this.scope;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.scope = data.scope;\n\n\t}\n\n}\n\nexport default Object3DNode;\n", "import Object3DNode from './Object3DNode.js';\n\nclass CameraNode extends Object3DNode {\n\n\tstatic PROJECTION_MATRIX = 'projectionMatrix';\n\n\tconstructor( scope = CameraNode.POSITION ) {\n\n\t\tsuper( scope );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst scope = this.scope;\n\n\t\tif ( scope === CameraNode.PROJECTION_MATRIX ) {\n\n\t\t\treturn 'mat4';\n\n\t\t}\n\n\t\treturn super.getNodeType( builder );\n\n\t}\n\n\tupdate( frame ) {\n\n\t\tconst camera = frame.camera;\n\t\tconst uniformNode = this._uniformNode;\n\t\tconst scope = this.scope;\n\n\t\tif ( scope === CameraNode.PROJECTION_MATRIX ) {\n\n\t\t\tuniformNode.value = camera.projectionMatrix;\n\n\t\t} else if ( scope === CameraNode.VIEW_MATRIX ) {\n\n\t\t\tuniformNode.value = camera.matrixWorldInverse;\n\n\t\t} else {\n\n\t\t\tthis.object3d = camera;\n\n\t\t\tsuper.update( frame );\n\n\t\t}\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst scope = this.scope;\n\n\t\tif ( scope === CameraNode.PROJECTION_MATRIX ) {\n\n\t\t\tthis._uniformNode.nodeType = 'mat4';\n\n\t\t}\n\n\t\treturn super.generate( builder );\n\n\t}\n\n}\n\nexport default CameraNode;\n", "import Node from '../core/Node.js';\nimport UniformNode from '../core/UniformNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\n\nclass ReferenceNode extends Node {\n\n\tconstructor( property, uniformType, object = null ) {\n\n\t\tsuper();\n\n\t\tthis.property = property;\n\n\t\tthis.uniformType = uniformType;\n\n\t\tthis.object = object;\n\n\t\tthis.node = null;\n\n\t\tthis.updateType = NodeUpdateType.Object;\n\n\t\tthis.setNodeType( uniformType );\n\n\t}\n\n\tsetNodeType( uniformType ) {\n\n\t\tthis.node = new UniformNode( null, uniformType );\n\t\tthis.nodeType = uniformType;\n\n\t\tif ( uniformType === 'color' ) {\n\n\t\t\tthis.nodeType = 'vec3';\n\n\t\t} else if ( uniformType === 'texture' ) {\n\n\t\t\tthis.nodeType = 'vec4';\n\n\t\t}\n\n\t}\n\n\tgetNodeType() {\n\n\t\treturn this.uniformType;\n\n\t}\n\n\tupdate( frame ) {\n\n\t\tconst object = this.object !== null ? this.object : frame.object;\n\t\tconst value = object[ this.property ];\n\n\t\tthis.node.value = value;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\treturn this.node.build( builder, this.getNodeType( builder ) );\n\n\t}\n\n}\n\nexport default ReferenceNode;\n", "import ReferenceNode from './ReferenceNode.js';\n\nclass MaterialReferenceNode extends ReferenceNode {\n\n\tconstructor( property, inputType, material = null ) {\n\n\t\tsuper( property, inputType, material );\n\n\t\tthis.material = material;\n\n\t}\n\n\tupdate( frame ) {\n\n\t\tthis.object = this.material !== null ? this.material : frame.material;\n\n\t\tsuper.update( frame );\n\n\t}\n\n}\n\nexport default MaterialReferenceNode;\n", "import AttributeNode from '../core/AttributeNode.js';\n\nclass UVNode extends AttributeNode {\n\n\tconstructor( index = 0 ) {\n\n\t\tsuper( null, 'vec2' );\n\n\t\tthis.isUVNode = true;\n\n\t\tthis.index = index;\n\n\t}\n\n\tgetAttributeName( /*builder*/ ) {\n\n\t\tconst index = this.index;\n\n\t\treturn 'uv' + ( index > 0 ? index + 1 : '' );\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.index = this.index;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.index = data.index;\n\n\t}\n\n}\n\nexport default UVNode;\n", "import UniformNode from '../core/UniformNode.js';\nimport UVNode from './UVNode.js';\n\nclass TextureNode extends UniformNode {\n\n\tconstructor( value, uvNode = new UVNode(), levelNode = null ) {\n\n\t\tsuper( value, 'vec4' );\n\n\t\tthis.isTextureNode = true;\n\n\t\tthis.uvNode = uvNode;\n\t\tthis.levelNode = levelNode;\n\n\t}\n\n\tgetUniformHash( /*builder*/ ) {\n\n\t\treturn this.value.uuid;\n\n\t}\n\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'texture';\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst texture = this.value;\n\n\t\tif ( ! texture || texture.isTexture !== true ) {\n\n\t\t\tthrow new Error( 'TextureNode: Need a three.js texture.' );\n\n\t\t}\n\n\t\tconst textureProperty = super.generate( builder, 'texture' );\n\n\t\tif ( output === 'sampler' ) {\n\n\t\t\treturn textureProperty + '_sampler';\n\n\t\t} else if ( builder.isReference( output ) ) {\n\n\t\t\treturn textureProperty;\n\n\t\t} else {\n\n\t\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\t\tlet snippet = nodeData.snippet;\n\n\t\t\tif ( snippet === undefined ) {\n\n\t\t\t\tconst uvSnippet = this.uvNode.build( builder, 'vec2' );\n\t\t\t\tconst levelNode = this.levelNode;\n\n\t\t\t\tif ( levelNode !== null ) {\n\n\t\t\t\t\tconst levelSnippet = levelNode.build( builder, 'float' );\n\n\t\t\t\t\tsnippet = builder.getTextureLevel( textureProperty, uvSnippet, levelSnippet );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsnippet = builder.getTexture( textureProperty, uvSnippet );\n\n\t\t\t\t}\n\n\t\t\t\tnodeData.snippet = snippet;\n\n\t\t\t}\n\n\t\t\treturn builder.format( snippet, 'vec4', output );\n\n\t\t}\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.value = this.value.toJSON( data.meta ).uuid;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.value = data.meta.textures[ data.value ];\n\n\t}\n\n}\n\nexport default TextureNode;\n", "import NodeUniform from './NodeUniform.js';\nimport NodeAttribute from './NodeAttribute.js';\nimport NodeVarying from './NodeVarying.js';\nimport NodeVar from './NodeVar.js';\nimport NodeCode from './NodeCode.js';\nimport NodeKeywords from './NodeKeywords.js';\nimport { NodeUpdateType } from './constants.js';\n\nimport { REVISION, LinearEncoding } from 'three';\n\nexport const defaultShaderStages = [ 'fragment', 'vertex' ];\nexport const shaderStages = [ ...defaultShaderStages, 'compute' ];\nexport const vector = [ 'x', 'y', 'z', 'w' ];\n\nconst typeFromLength = new Map();\ntypeFromLength.set( 1, 'float' );\ntypeFromLength.set( 2, 'vec2' );\ntypeFromLength.set( 3, 'vec3' );\ntypeFromLength.set( 4, 'vec4' );\ntypeFromLength.set( 9, 'mat3' );\ntypeFromLength.set( 16, 'mat4' );\n\nconst toFloat = ( value ) => {\n\n\tvalue = Number( value );\n\n\treturn value + ( value % 1 ? '' : '.0' );\n\n};\n\nclass NodeBuilder {\n\n\tconstructor( object, renderer, parser ) {\n\n\t\tthis.object = object;\n\t\tthis.material = object.material || null;\n\t\tthis.geometry = object.geometry || null;\n\t\tthis.renderer = renderer;\n\t\tthis.parser = parser;\n\n\t\tthis.nodes = [];\n\t\tthis.updateNodes = [];\n\t\tthis.hashNodes = {};\n\n\t\tthis.scene = null;\n\t\tthis.lightsNode = null;\n\t\tthis.fogNode = null;\n\n\t\tthis.vertexShader = null;\n\t\tthis.fragmentShader = null;\n\t\tthis.computeShader = null;\n\n\t\tthis.flowNodes = { vertex: [], fragment: [], compute: [] };\n\t\tthis.flowCode = { vertex: '', fragment: '', compute: [] };\n\t\tthis.uniforms = { vertex: [], fragment: [], compute: [], index: 0 };\n\t\tthis.codes = { vertex: [], fragment: [], compute: [] };\n\t\tthis.attributes = [];\n\t\tthis.varyings = [];\n\t\tthis.vars = { vertex: [], fragment: [], compute: [] };\n\t\tthis.flow = { code: '' };\n\t\tthis.stack = [];\n\n\t\tthis.context = {\n\t\t\tkeywords: new NodeKeywords(),\n\t\t\tmaterial: object.material\n\t\t};\n\n\t\tthis.nodesData = new WeakMap();\n\t\tthis.flowsData = new WeakMap();\n\n\t\tthis.shaderStage = null;\n\t\tthis.buildStage = null;\n\n\t}\n\n\tget node() {\n\n\t\treturn this.stack[ this.stack.length - 1 ];\n\n\t}\n\n\taddStack( node ) {\n\n\t\t/*\n\t\tif ( this.stack.indexOf( node ) !== - 1 ) {\n\n\t\t\tconsole.warn( 'Recursive node: ', node );\n\n\t\t}\n\t\t*/\n\n\t\tthis.stack.push( node );\n\n\t}\n\n\tremoveStack( node ) {\n\n\t\tconst lastStack = this.stack.pop();\n\n\t\tif ( lastStack !== node ) {\n\n\t\t\tthrow new Error( 'NodeBuilder: Invalid node stack!' );\n\n\t\t}\n\n\t}\n\n\tsetHashNode( node, hash ) {\n\n\t\tthis.hashNodes[ hash ] = node;\n\n\t}\n\n\taddNode( node ) {\n\n\t\tif ( this.nodes.indexOf( node ) === - 1 ) {\n\n\t\t\tconst updateType = node.getUpdateType( this );\n\n\t\t\tif ( updateType !== NodeUpdateType.None ) {\n\n\t\t\t\tthis.updateNodes.push( node );\n\n\t\t\t}\n\n\t\t\tthis.nodes.push( node );\n\n\t\t\tthis.setHashNode( node, node.getHash( this ) );\n\n\t\t}\n\n\t}\n\n\tgetMethod( method ) {\n\n\t\treturn method;\n\n\t}\n\n\tgetNodeFromHash( hash ) {\n\n\t\treturn this.hashNodes[ hash ];\n\n\t}\n\n\taddFlow( shaderStage, node ) {\n\n\t\tthis.flowNodes[ shaderStage ].push( node );\n\n\t\treturn node;\n\n\t}\n\n\tsetContext( context ) {\n\n\t\tthis.context = context;\n\n\t}\n\n\tgetContext() {\n\n\t\treturn this.context;\n\n\t}\n\n\tisAvailable( /*name*/ ) {\n\n\t\treturn false;\n\n\t}\n\n\tgetInstanceIndex() {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgetFrontFacing() {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgetTexture( /* textureProperty, uvSnippet */ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgetTextureLevel( /* textureProperty, uvSnippet, levelSnippet */ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgetCubeTexture( /* textureProperty, uvSnippet */ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgetCubeTextureLevel( /* textureProperty, uvSnippet, levelSnippet */ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\t// @TODO: rename to .generateConst()\n\tgetConst( type, value ) {\n\n\t\tif ( type === 'float' ) return toFloat( value );\n\t\tif ( type === 'int' ) return `${ Math.round( value ) }`;\n\t\tif ( type === 'uint' ) return value >= 0 ? `${ Math.round( value ) }u` : '0u';\n\t\tif ( type === 'bool' ) return value ? 'true' : 'false';\n\t\tif ( type === 'color' ) return `${ this.getType( 'vec3' ) }( ${ toFloat( value.r ) }, ${ toFloat( value.g ) }, ${ toFloat( value.b ) } )`;\n\n\t\tconst typeLength = this.getTypeLength( type );\n\n\t\tconst componentType = this.getComponentType( type );\n\n\t\tconst getConst = value => this.getConst( componentType, value );\n\n\t\tif ( typeLength === 2 ) {\n\n\t\t\treturn `${ this.getType( type ) }( ${ getConst( value.x ) }, ${ getConst( value.y ) } )`;\n\n\t\t} else if ( typeLength === 3 ) {\n\n\t\t\treturn `${ this.getType( type ) }( ${ getConst( value.x ) }, ${ getConst( value.y ) }, ${ getConst( value.z ) } )`;\n\n\t\t} else if ( typeLength === 4 ) {\n\n\t\t\treturn `${ this.getType( type ) }( ${ getConst( value.x ) }, ${ getConst( value.y ) }, ${ getConst( value.z ) }, ${ getConst( value.w ) } )`;\n\n\t\t} else if ( typeLength > 4 ) {\n\n\t\t\treturn `${ this.getType( type ) }()`;\n\n\t\t}\n\n\t\tthrow new Error( `NodeBuilder: Type '${type}' not found in generate constant attempt.` );\n\n\t}\n\n\tgetType( type ) {\n\n\t\treturn type;\n\n\t}\n\n\tgenerateMethod( method ) {\n\n\t\treturn method;\n\n\t}\n\n\tgetAttribute( name, type ) {\n\n\t\tconst attributes = this.attributes;\n\n\t\t// find attribute\n\n\t\tfor ( const attribute of attributes ) {\n\n\t\t\tif ( attribute.name === name ) {\n\n\t\t\t\treturn attribute;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// create a new if no exist\n\n\t\tconst attribute = new NodeAttribute( name, type );\n\n\t\tattributes.push( attribute );\n\n\t\treturn attribute;\n\n\t}\n\n\tgetPropertyName( node/*, shaderStage*/ ) {\n\n\t\treturn node.name;\n\n\t}\n\n\tisVector( type ) {\n\n\t\treturn /vec\\d/.test( type );\n\n\t}\n\n\tisMatrix( type ) {\n\n\t\treturn /mat\\d/.test( type );\n\n\t}\n\n\tisReference( type ) {\n\n\t\treturn type === 'void' || type === 'property' || type === 'sampler' || type === 'texture' || type === 'cubeTexture';\n\n\t}\n\n\tisShaderStage( shaderStage ) {\n\n\t\treturn this.shaderStage === shaderStage;\n\n\t}\n\n\tgetTextureEncodingFromMap( map ) {\n\n\t\tlet encoding;\n\n\t\tif ( map && map.isTexture ) {\n\n\t\t\tencoding = map.encoding;\n\n\t\t} else if ( map && map.isWebGLRenderTarget ) {\n\n\t\t\tencoding = map.texture.encoding;\n\n\t\t} else {\n\n\t\t\tencoding = LinearEncoding;\n\n\t\t}\n\n\t\treturn encoding;\n\n\t}\n\n\tgetComponentType( type ) {\n\n\t\ttype = this.getVectorType( type );\n\n\t\tconst componentType = /(b|i|u|)(vec|mat)([2-4])/.exec( type );\n\n\t\tif ( componentType === null ) return null;\n\n\t\tif ( componentType[ 1 ] === 'b' ) return 'bool';\n\t\tif ( componentType[ 1 ] === 'i' ) return 'int';\n\t\tif ( componentType[ 1 ] === 'u' ) return 'uint';\n\n\t\treturn 'float';\n\n\t}\n\n\tgetVectorType( type ) {\n\n\t\tif ( type === 'color' ) return 'vec3';\n\t\tif ( type === 'texture' ) return 'vec4';\n\n\t\treturn type;\n\n\t}\n\n\tgetTypeFromLength( length ) {\n\n\t\treturn typeFromLength.get( length );\n\n\t}\n\n\tgetTypeLength( type ) {\n\n\t\tconst vecType = this.getVectorType( type );\n\t\tconst vecNum = /vec([2-4])/.exec( vecType );\n\n\t\tif ( vecNum !== null ) return Number( vecNum[ 1 ] );\n\t\tif ( vecType === 'float' || vecType === 'bool' || vecType === 'int' || vecType === 'uint' ) return 1;\n\t\tif ( /mat3/.test( type ) === true ) return 9;\n\t\tif ( /mat4/.test( type ) === true ) return 16;\n\n\t\treturn 0;\n\n\t}\n\n\tgetVectorFromMatrix( type ) {\n\n\t\treturn type.replace( 'mat', 'vec' );\n\n\t}\n\n\tgetDataFromNode( node, shaderStage = this.shaderStage ) {\n\n\t\tlet nodeData = this.nodesData.get( node );\n\n\t\tif ( nodeData === undefined ) {\n\n\t\t\tnodeData = { vertex: {}, fragment: {}, compute: {} };\n\n\t\t\tthis.nodesData.set( node, nodeData );\n\n\t\t}\n\n\t\treturn shaderStage !== null ? nodeData[ shaderStage ] : nodeData;\n\n\t}\n\n\tgetNodeProperties( node, shaderStage = this.shaderStage ) {\n\n\t\tconst nodeData = this.getDataFromNode( this, shaderStage );\n\t\tconst constructHash = node.getConstructHash( this );\n\n\t\tnodeData.properties = nodeData.properties || {};\n\t\tnodeData.properties[ constructHash ] = nodeData.properties[ constructHash ] || { outputNode: null };\n\n\t\treturn nodeData.properties[ constructHash ];\n\n\t}\n\n\tgetUniformFromNode( node, shaderStage, type ) {\n\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage );\n\n\t\tlet nodeUniform = nodeData.uniform;\n\n\t\tif ( nodeUniform === undefined ) {\n\n\t\t\tconst index = this.uniforms.index ++;\n\n\t\t\tnodeUniform = new NodeUniform( 'nodeUniform' + index, type, node );\n\n\t\t\tthis.uniforms[ shaderStage ].push( nodeUniform );\n\n\t\t\tnodeData.uniform = nodeUniform;\n\n\t\t}\n\n\t\treturn nodeUniform;\n\n\t}\n\n\tgetVarFromNode( node, type, shaderStage = this.shaderStage ) {\n\n\t\tconst nodeData = this.getDataFromNode( node, shaderStage );\n\n\t\tlet nodeVar = nodeData.variable;\n\n\t\tif ( nodeVar === undefined ) {\n\n\t\t\tconst vars = this.vars[ shaderStage ];\n\t\t\tconst index = vars.length;\n\n\t\t\tnodeVar = new NodeVar( 'nodeVar' + index, type );\n\n\t\t\tvars.push( nodeVar );\n\n\t\t\tnodeData.variable = nodeVar;\n\n\t\t}\n\n\t\treturn nodeVar;\n\n\t}\n\n\tgetVaryingFromNode( node, type ) {\n\n\t\tconst nodeData = this.getDataFromNode( node, null );\n\n\t\tlet nodeVarying = nodeData.varying;\n\n\t\tif ( nodeVarying === undefined ) {\n\n\t\t\tconst varyings = this.varyings;\n\t\t\tconst index = varyings.length;\n\n\t\t\tnodeVarying = new NodeVarying( 'nodeVarying' + index, type );\n\n\t\t\tvaryings.push( nodeVarying );\n\n\t\t\tnodeData.varying = nodeVarying;\n\n\t\t}\n\n\t\treturn nodeVarying;\n\n\t}\n\n\tgetCodeFromNode( node, type, shaderStage = this.shaderStage ) {\n\n\t\tconst nodeData = this.getDataFromNode( node );\n\n\t\tlet nodeCode = nodeData.code;\n\n\t\tif ( nodeCode === undefined ) {\n\n\t\t\tconst codes = this.codes[ shaderStage ];\n\t\t\tconst index = codes.length;\n\n\t\t\tnodeCode = new NodeCode( 'nodeCode' + index, type );\n\n\t\t\tcodes.push( nodeCode );\n\n\t\t\tnodeData.code = nodeCode;\n\n\t\t}\n\n\t\treturn nodeCode;\n\n\t}\n\n\taddFlowCode( code ) {\n\n\t\tthis.flow.code += code;\n\n\t}\n\n\tgetFlowData( node/*, shaderStage*/ ) {\n\n\t\treturn this.flowsData.get( node );\n\n\t}\n\n\tflowNode( node ) {\n\n\t\tconst output = node.getNodeType( this );\n\n\t\tconst flowData = this.flowChildNode( node, output );\n\n\t\tthis.flowsData.set( node, flowData );\n\n\t\treturn flowData;\n\n\t}\n\n\tflowChildNode( node, output = null ) {\n\n\t\tconst previousFlow = this.flow;\n\n\t\tconst flow = {\n\t\t\tcode: '',\n\t\t};\n\n\t\tthis.flow = flow;\n\n\t\tflow.result = node.build( this, output );\n\n\t\tthis.flow = previousFlow;\n\n\t\treturn flow;\n\n\t}\n\n\tflowNodeFromShaderStage( shaderStage, node, output = null, propertyName = null ) {\n\n\t\tconst previousShaderStage = this.shaderStage;\n\n\t\tthis.setShaderStage( shaderStage );\n\n\t\tconst flowData = this.flowChildNode( node, output );\n\n\t\tif ( propertyName !== null ) {\n\n\t\t\tflowData.code += `${propertyName} = ${flowData.result};\\n\\t`;\n\n\t\t}\n\n\t\tthis.flowCode[ shaderStage ] = this.flowCode[ shaderStage ] + flowData.code;\n\n\t\tthis.setShaderStage( previousShaderStage );\n\n\t\treturn flowData;\n\n\t}\n\n\tgetAttributes( /*shaderStage*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgetVaryings( /*shaderStage*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgetVars( shaderStage ) {\n\n\t\tlet snippet = '';\n\n\t\tconst vars = this.vars[ shaderStage ];\n\n\t\tfor ( const variable of vars ) {\n\n\t\t\tsnippet += `${variable.type} ${variable.name}; `;\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tgetUniforms( /*shaderStage*/ ) {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tgetCodes( shaderStage ) {\n\n\t\tconst codes = this.codes[ shaderStage ];\n\n\t\tlet code = '';\n\n\t\tfor ( const nodeCode of codes ) {\n\n\t\t\tcode += nodeCode.code + '\\n';\n\n\t\t}\n\n\t\treturn code;\n\n\t}\n\n\tgetHash() {\n\n\t\treturn this.vertexShader + this.fragmentShader + this.computeShader;\n\n\t}\n\n\tsetShaderStage( shaderStage ) {\n\n\t\tthis.shaderStage = shaderStage;\n\n\t}\n\n\tgetShaderStage() {\n\n\t\treturn this.shaderStage;\n\n\t}\n\n\tsetBuildStage( buildStage ) {\n\n\t\tthis.buildStage = buildStage;\n\n\t}\n\n\tgetBuildStage() {\n\n\t\treturn this.buildStage;\n\n\t}\n\n\tbuildCode() {\n\n\t\tconsole.warn( 'Abstract function.' );\n\n\t}\n\n\tbuild() {\n\n\t\t// stage 1: generate shader node\n\n\t\tthis.setBuildStage( 'construct' );\n\n\t\tfor ( const shaderStage of shaderStages ) {\n\n\t\t\tthis.setShaderStage( shaderStage );\n\n\t\t\tconst flowNodes = this.flowNodes[ shaderStage ];\n\n\t\t\tfor ( const node of flowNodes ) {\n\n\t\t\t\tnode.build( this );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// stage 2: analyze nodes to possible optimization and validation\n\n\t\tthis.setBuildStage( 'analyze' );\n\n\t\tfor ( const shaderStage of shaderStages ) {\n\n\t\t\tthis.setShaderStage( shaderStage );\n\n\t\t\tconst flowNodes = this.flowNodes[ shaderStage ];\n\n\t\t\tfor ( const node of flowNodes ) {\n\n\t\t\t\tnode.build( this );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// stage 3: pre-build vertex code used in fragment shader\n\n\t\tthis.setBuildStage( 'generate' );\n\n\t\tif ( this.context.vertex && this.context.vertex.isNode ) {\n\n\t\t\tthis.flowNodeFromShaderStage( 'vertex', this.context.vertex );\n\n\t\t}\n\n\t\t// stage 4: generate shader\n\n\t\tthis.setBuildStage( 'generate' );\n\n\t\tfor ( const shaderStage of shaderStages ) {\n\n\t\t\tthis.setShaderStage( shaderStage );\n\n\t\t\tconst flowNodes = this.flowNodes[ shaderStage ];\n\n\t\t\tfor ( const node of flowNodes ) {\n\n\t\t\t\tthis.flowNode( node );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setBuildStage( null );\n\t\tthis.setShaderStage( null );\n\n\t\t// stage 5: build code for a specific output\n\n\t\tthis.buildCode();\n\n\t\treturn this;\n\n\t}\n\n\tformat( snippet, fromType, toType ) {\n\n\t\tfromType = this.getVectorType( fromType );\n\t\ttoType = this.getVectorType( toType );\n\n\t\tif ( fromType === toType || toType === null || this.isReference( toType ) ) {\n\n\t\t\treturn snippet;\n\n\t\t}\n\n\t\tconst fromTypeLength = this.getTypeLength( fromType );\n\t\tconst toTypeLength = this.getTypeLength( toType );\n\n\t\tif ( fromTypeLength > 4 ) { // fromType is matrix-like\n\n\t\t\t// @TODO: ignore for now\n\n\t\t\treturn snippet;\n\n\t\t}\n\n\t\tif ( toTypeLength > 4 || toTypeLength === 0 ) { // toType is matrix-like or unknown\n\n\t\t\t// @TODO: ignore for now\n\n\t\t\treturn snippet;\n\n\t\t}\n\n\t\tif ( fromTypeLength === toTypeLength ) {\n\n\t\t\treturn `${ this.getType( toType ) }( ${ snippet } )`;\n\n\t\t}\n\n\t\tif ( fromTypeLength > toTypeLength ) {\n\n\t\t\treturn this.format( `${ snippet }.${ 'xyz'.slice( 0, toTypeLength ) }`, this.getTypeFromLength( toTypeLength ), toType );\n\n\t\t}\n\n\t\tif ( toTypeLength === 4 ) { // toType is vec4-like\n\n\t\t\treturn `${ this.getType( toType ) }( ${ this.format( snippet, fromType, 'vec3' ) }, 1.0 )`;\n\n\t\t}\n\n\t\tif ( fromTypeLength === 2 ) { // fromType is vec2-like and toType is vec3-like\n\n\t\t\treturn `${ this.getType( toType ) }( ${ this.format( snippet, fromType, 'vec2' ) }, 0.0 )`;\n\n\t\t}\n\n\t\treturn `${ this.getType( toType ) }( ${ snippet } )`; // fromType is float-like\n\n\t}\n\n\tgetSignature() {\n\n\t\treturn `// Three.js r${ REVISION } - NodeMaterial System\\n`;\n\n\t}\n\n}\n\nexport default NodeBuilder;\n", "import Node from '../core/Node.js';\nimport { vector } from '../core/NodeBuilder.js';\n\nconst vectorComponents = 'xyzw';\n\nclass SplitNode extends Node {\n\n\tconstructor( node, components = 'x' ) {\n\n\t\tsuper();\n\n\t\tthis.node = node;\n\t\tthis.components = components;\n\n\t}\n\n\tgetVectorLength() {\n\n\t\tlet vectorLength = this.components.length;\n\n\t\tfor ( const c of this.components ) {\n\n\t\t\tvectorLength = Math.max( vector.indexOf( c ) + 1, vectorLength );\n\n\t\t}\n\n\t\treturn vectorLength;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn builder.getTypeFromLength( this.components.length );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst node = this.node;\n\t\tconst nodeTypeLength = builder.getTypeLength( node.getNodeType( builder ) );\n\n\t\tlet snippet = null;\n\n\t\tif ( nodeTypeLength > 1 ) {\n\n\t\t\tlet type = null;\n\n\t\t\tconst componentsLength = this.getVectorLength();\n\n\t\t\tif ( componentsLength >= nodeTypeLength ) {\n\n\t\t\t\t// needed expand the input node\n\n\t\t\t\ttype = builder.getTypeFromLength( this.getVectorLength() );\n\n\t\t\t}\n\n\t\t\tconst nodeSnippet = node.build( builder, type );\n\n\t\t\tif ( this.components.length === nodeTypeLength && this.components === vectorComponents.slice( 0, this.components.length ) ) {\n\n\t\t\t\t// unecessary swizzle\n\n\t\t\t\tsnippet = builder.format( nodeSnippet, type, output );\n\n\t\t\t} else {\n\n\t\t\t\tsnippet = builder.format( `${nodeSnippet}.${this.components}`, this.getNodeType( builder ), output );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// ignore .components if .node returns float/integer\n\n\t\t\tsnippet = node.build( builder, output );\n\n\t\t}\n\n\t\treturn snippet;\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.components = this.components;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.components = data.components;\n\n\t}\n\n}\n\nexport default SplitNode;\n", "import Node from '../core/Node.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport MaterialReferenceNode from './MaterialReferenceNode.js';\nimport TextureNode from './TextureNode.js';\nimport SplitNode from '../utils/SplitNode.js';\n\nclass MaterialNode extends Node {\n\n\tstatic ALPHA_TEST = 'alphaTest';\n\tstatic COLOR = 'color';\n\tstatic OPACITY = 'opacity';\n\tstatic ROUGHNESS = 'roughness';\n\tstatic METALNESS = 'metalness';\n\tstatic EMISSIVE = 'emissive';\n\tstatic ROTATION = 'rotation';\n\n\tconstructor( scope = MaterialNode.COLOR ) {\n\n\t\tsuper();\n\n\t\tthis.scope = scope;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst scope = this.scope;\n\t\tconst material = builder.context.material;\n\n\t\tif ( scope === MaterialNode.COLOR ) {\n\n\t\t\treturn material.map !== null ? 'vec4' : 'vec3';\n\n\t\t} else if ( scope === MaterialNode.OPACITY || scope === MaterialNode.ROTATION ) {\n\n\t\t\treturn 'float';\n\n\t\t} else if ( scope === MaterialNode.EMISSIVE ) {\n\n\t\t\treturn 'vec3';\n\n\t\t} else if ( scope === MaterialNode.ROUGHNESS || scope === MaterialNode.METALNESS ) {\n\n\t\t\treturn 'float';\n\n\t\t}\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst material = builder.context.material;\n\t\tconst scope = this.scope;\n\n\t\tlet node = null;\n\n\t\tif ( scope === MaterialNode.ALPHA_TEST ) {\n\n\t\t\tnode = new MaterialReferenceNode( 'alphaTest', 'float' );\n\n\t\t} else if ( scope === MaterialNode.COLOR ) {\n\n\t\t\tconst colorNode = new MaterialReferenceNode( 'color', 'color' );\n\n\t\t\tif ( material.map?.isTexture === true ) {\n\n\t\t\t\t//new MaterialReferenceNode( 'map', 'texture' )\n\t\t\t\tconst map = new TextureNode( material.map );\n\n\t\t\t\tnode = new OperatorNode( '*', colorNode, map );\n\n\t\t\t} else {\n\n\t\t\t\tnode = colorNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.OPACITY ) {\n\n\t\t\tconst opacityNode = new MaterialReferenceNode( 'opacity', 'float' );\n\n\t\t\tif ( material.alphaMap?.isTexture === true ) {\n\n\t\t\t\tnode = new OperatorNode( '*', opacityNode, new MaterialReferenceNode( 'alphaMap', 'texture' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = opacityNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.ROUGHNESS ) {\n\n\t\t\tconst roughnessNode = new MaterialReferenceNode( 'roughness', 'float' );\n\n\t\t\tif ( material.roughnessMap?.isTexture === true ) {\n\n\t\t\t\tnode = new OperatorNode( '*', roughnessNode, new SplitNode( new TextureNode( material.roughnessMap ), 'g' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = roughnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.METALNESS ) {\n\n\t\t\tconst metalnessNode = new MaterialReferenceNode( 'metalness', 'float' );\n\n\t\t\tif ( material.metalnessMap?.isTexture === true ) {\n\n\t\t\t\tnode = new OperatorNode( '*', metalnessNode, new SplitNode( new TextureNode( material.metalnessMap ), 'b' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = metalnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.EMISSIVE ) {\n\n\t\t\tconst emissiveNode = new MaterialReferenceNode( 'emissive', 'color' );\n\n\t\t\tif ( material.emissiveMap?.isTexture === true ) {\n\n\t\t\t\tnode = new OperatorNode( '*', emissiveNode, new TextureNode( material.emissiveMap ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = emissiveNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.ROTATION ) {\n\n\t\t\tnode = new MaterialReferenceNode( 'rotation', 'float' );\n\n\t\t} else {\n\n\t\t\tconst outputType = this.getNodeType( builder );\n\n\t\t\tnode = new MaterialReferenceNode( scope, outputType );\n\n\t\t}\n\n\t\treturn node.build( builder, output );\n\n\t}\n\n}\n\nexport default MaterialNode;\n", "import Object3DNode from './Object3DNode.js';\n\nclass ModelNode extends Object3DNode {\n\n\tconstructor( scope = ModelNode.VIEW_MATRIX ) {\n\n\t\tsuper( scope );\n\n\t}\n\n\tupdate( frame ) {\n\n\t\tthis.object3d = frame.object;\n\n\t\tsuper.update( frame );\n\n\t}\n\n}\n\nexport default ModelNode;\n", "import TempNode from '../core/TempNode.js';\nimport ExpressionNode from '../core/ExpressionNode.js';\nimport SplitNode from '../utils/SplitNode.js';\nimport OperatorNode from './OperatorNode.js';\n\nclass MathNode extends TempNode {\n\n\t// 1 input\n\n\tstatic RADIANS = 'radians';\n\tstatic DEGREES = 'degrees';\n\tstatic EXP = 'exp';\n\tstatic EXP2 = 'exp2';\n\tstatic LOG = 'log';\n\tstatic LOG2 = 'log2';\n\tstatic SQRT = 'sqrt';\n\tstatic INVERSE_SQRT = 'inversesqrt';\n\tstatic FLOOR = 'floor';\n\tstatic CEIL = 'ceil';\n\tstatic NORMALIZE = 'normalize';\n\tstatic FRACT = 'fract';\n\tstatic SIN = 'sin';\n\tstatic COS = 'cos';\n\tstatic TAN = 'tan';\n\tstatic ASIN = 'asin';\n\tstatic ACOS = 'acos';\n\tstatic ATAN = 'atan';\n\tstatic ABS = 'abs';\n\tstatic SIGN = 'sign';\n\tstatic LENGTH = 'length';\n\tstatic NEGATE = 'negate';\n\tstatic INVERT = 'invert';\n\tstatic DFDX = 'dFdx';\n\tstatic DFDY = 'dFdy';\n\tstatic SATURATE = 'saturate';\n\tstatic ROUND = 'round';\n\n\t// 2 inputs\n\n\tstatic ATAN2 = 'atan2';\n\tstatic MIN = 'min';\n\tstatic MAX = 'max';\n\tstatic MOD = 'mod';\n\tstatic STEP = 'step';\n\tstatic REFLECT = 'reflect';\n\tstatic DISTANCE = 'distance';\n\tstatic DOT = 'dot';\n\tstatic CROSS = 'cross';\n\tstatic POW = 'pow';\n\tstatic TRANSFORM_DIRECTION = 'transformDirection';\n\n\t// 3 inputs\n\n\tstatic MIX = 'mix';\n\tstatic CLAMP = 'clamp';\n\tstatic REFRACT = 'refract';\n\tstatic SMOOTHSTEP = 'smoothstep';\n\tstatic FACEFORWARD = 'faceforward';\n\n\tconstructor( method, aNode, bNode = null, cNode = null ) {\n\n\t\tsuper();\n\n\t\tthis.method = method;\n\n\t\tthis.aNode = aNode;\n\t\tthis.bNode = bNode;\n\t\tthis.cNode = cNode;\n\n\t}\n\n\tgetInputType( builder ) {\n\n\t\tconst aType = this.aNode.getNodeType( builder );\n\t\tconst bType = this.bNode ? this.bNode.getNodeType( builder ) : null;\n\t\tconst cType = this.cNode ? this.cNode.getNodeType( builder ) : null;\n\n\t\tconst aLen = builder.isMatrix( aType ) ? 0 : builder.getTypeLength( aType );\n\t\tconst bLen = builder.isMatrix( bType ) ? 0 : builder.getTypeLength( bType );\n\t\tconst cLen = builder.isMatrix( cType ) ? 0 : builder.getTypeLength( cType );\n\n\t\tif ( aLen > bLen && aLen > cLen ) {\n\n\t\t\treturn aType;\n\n\t\t} else if ( bLen > cLen ) {\n\n\t\t\treturn bType;\n\n\t\t} else if ( cLen > aLen ) {\n\n\t\t\treturn cType;\n\n\t\t}\n\n\t\treturn aType;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst method = this.method;\n\n\t\tif ( method === MathNode.LENGTH || method === MathNode.DISTANCE || method === MathNode.DOT ) {\n\n\t\t\treturn 'float';\n\n\t\t} else if ( method === MathNode.CROSS ) {\n\n\t\t\treturn 'vec3';\n\n\t\t} else {\n\n\t\t\treturn this.getInputType( builder );\n\n\t\t}\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst method = this.method;\n\n\t\tconst type = this.getNodeType( builder );\n\t\tconst inputType = this.getInputType( builder );\n\n\t\tconst a = this.aNode;\n\t\tconst b = this.bNode;\n\t\tconst c = this.cNode;\n\n\t\tconst isWebGL = builder.renderer.isWebGLRenderer === true;\n\n\t\tif ( method === MathNode.TRANSFORM_DIRECTION ) {\n\n\t\t\t// dir can be either a direction vector or a normal vector\n\t\t\t// upper-left 3x3 of matrix is assumed to be orthogonal\n\n\t\t\tlet tA = a;\n\t\t\tlet tB = b;\n\n\t\t\tif ( builder.isMatrix( tA.getNodeType( builder ) ) ) {\n\n\t\t\t\ttB = new ExpressionNode( `${ builder.getType( 'vec4' ) }( ${ tB.build( builder, 'vec3' ) }, 0.0 )`, 'vec4' );\n\n\t\t\t} else {\n\n\t\t\t\ttA = new ExpressionNode( `${ builder.getType( 'vec4' ) }( ${ tA.build( builder, 'vec3' ) }, 0.0 )`, 'vec4' );\n\n\t\t\t}\n\n\t\t\tconst mulNode = new SplitNode( new OperatorNode( '*', tA, tB ), 'xyz' );\n\n\t\t\treturn new MathNode( MathNode.NORMALIZE, mulNode ).build( builder );\n\n\t\t} else if ( method === MathNode.SATURATE ) {\n\n\t\t\treturn builder.format( `clamp( ${ a.build( builder, inputType ) }, 0.0, 1.0 )`, type, output );\n\n\t\t} else if ( method === MathNode.NEGATE ) {\n\n\t\t\treturn builder.format( '( -' + a.build( builder, inputType ) + ' )', type, output );\n\n\t\t} else if ( method === MathNode.INVERT ) {\n\n\t\t\treturn builder.format( '( 1.0 - ' + a.build( builder, inputType ) + ' )', type, output );\n\n\t\t} else {\n\n\t\t\tconst params = [];\n\n\t\t\tif ( method === MathNode.CROSS ) {\n\n\t\t\t\tparams.push(\n\t\t\t\t\ta.build( builder, type ),\n\t\t\t\t\tb.build( builder, type )\n\t\t\t\t);\n\n\t\t\t} else if ( method === MathNode.STEP ) {\n\n\t\t\t\tparams.push(\n\t\t\t\t\ta.build( builder, builder.getTypeLength( a.getNodeType( builder ) ) === 1 ? 'float' : inputType ),\n\t\t\t\t\tb.build( builder, inputType )\n\t\t\t\t);\n\n\t\t\t} else if ( ( isWebGL && ( method === MathNode.MIN || method === MathNode.MAX ) ) || method === MathNode.MOD ) {\n\n\t\t\t\tparams.push(\n\t\t\t\t\ta.build( builder, inputType ),\n\t\t\t\t\tb.build( builder, builder.getTypeLength( b.getNodeType( builder ) ) === 1 ? 'float' : inputType )\n\t\t\t\t);\n\n\t\t\t} else if ( method === MathNode.REFRACT ) {\n\n\t\t\t\tparams.push(\n\t\t\t\t\ta.build( builder, inputType ),\n\t\t\t\t\tb.build( builder, inputType ),\n\t\t\t\t\tc.build( builder, 'float' )\n\t\t\t\t);\n\n\t\t\t} else if ( method === MathNode.MIX ) {\n\n\t\t\t\tparams.push(\n\t\t\t\t\ta.build( builder, inputType ),\n\t\t\t\t\tb.build( builder, inputType ),\n\t\t\t\t\tc.build( builder, builder.getTypeLength( c.getNodeType( builder ) ) === 1 ? 'float' : inputType )\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\tparams.push( a.build( builder, inputType ) );\n\n\t\t\t\tif ( c !== null ) {\n\n\t\t\t\t\tparams.push( b.build( builder, inputType ), c.build( builder, inputType ) );\n\n\t\t\t\t} else if ( b !== null ) {\n\n\t\t\t\t\tparams.push( b.build( builder, inputType ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn builder.format( `${ builder.getMethod( method ) }( ${params.join( ', ' )} )`, type, output );\n\n\t\t}\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.method = this.method;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.method = data.method;\n\n\t}\n\n}\n\nexport default MathNode;\n", "import Node from '../core/Node.js';\nimport AttributeNode from '../core/AttributeNode.js';\nimport VaryingNode from '../core/VaryingNode.js';\nimport ModelNode from '../accessors/ModelNode.js';\nimport MathNode from '../math/MathNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\n\nclass PositionNode extends Node {\n\n\tstatic GEOMETRY = 'geometry';\n\tstatic LOCAL = 'local';\n\tstatic WORLD = 'world';\n\tstatic VIEW = 'view';\n\tstatic VIEW_DIRECTION = 'viewDirection';\n\n\tconstructor( scope = PositionNode.LOCAL ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis.scope = scope;\n\n\t}\n\n\tgetHash( /*builder*/ ) {\n\n\t\treturn `position-${this.scope}`;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst scope = this.scope;\n\n\t\tlet outputNode = null;\n\n\t\tif ( scope === PositionNode.GEOMETRY ) {\n\n\t\t\toutputNode = new AttributeNode( 'position', 'vec3' );\n\n\t\t} else if ( scope === PositionNode.LOCAL ) {\n\n\t\t\toutputNode = new VaryingNode( new PositionNode( PositionNode.GEOMETRY ) );\n\n\t\t} else if ( scope === PositionNode.WORLD ) {\n\n\t\t\tconst vertexPositionNode = new MathNode( MathNode.TRANSFORM_DIRECTION, new ModelNode( ModelNode.WORLD_MATRIX ), new PositionNode( PositionNode.LOCAL ) );\n\t\t\toutputNode = new VaryingNode( vertexPositionNode );\n\n\t\t} else if ( scope === PositionNode.VIEW ) {\n\n\t\t\tconst vertexPositionNode = new OperatorNode( '*', new ModelNode( ModelNode.VIEW_MATRIX ), new PositionNode( PositionNode.LOCAL ) );\n\t\t\toutputNode = new VaryingNode( vertexPositionNode );\n\n\t\t} else if ( scope === PositionNode.VIEW_DIRECTION ) {\n\n\t\t\tconst vertexPositionNode = new MathNode( MathNode.NEGATE, new PositionNode( PositionNode.VIEW ) );\n\t\t\toutputNode = new MathNode( MathNode.NORMALIZE, new VaryingNode( vertexPositionNode ) );\n\n\t\t}\n\n\t\treturn outputNode.build( builder, this.getNodeType( builder ) );\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.scope = this.scope;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.scope = data.scope;\n\n\t}\n\n}\n\nexport default PositionNode;\n", "import Node from '../core/Node.js';\nimport CameraNode from '../accessors/CameraNode.js';\nimport ModelNode from '../accessors/ModelNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport PositionNode from '../accessors/PositionNode.js';\n\nclass ModelViewProjectionNode extends Node {\n\n\tconstructor( position = new PositionNode() ) {\n\n\t\tsuper( 'vec4' );\n\n\t\tthis.position = position;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst position = this.position;\n\n\t\tconst mvpMatrix = new OperatorNode( '*', new CameraNode( CameraNode.PROJECTION_MATRIX ), new ModelNode( ModelNode.VIEW_MATRIX ) );\n\t\tconst mvpNode = new OperatorNode( '*', mvpMatrix, position );\n\n\t\treturn mvpNode.build( builder );\n\n\t}\n\n}\n\nexport default ModelViewProjectionNode;\n", "import Node from '../core/Node.js';\nimport AttributeNode from '../core/AttributeNode.js';\nimport VaryingNode from '../core/VaryingNode.js';\nimport ModelNode from '../accessors/ModelNode.js';\nimport CameraNode from '../accessors/CameraNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport MathNode from '../math/MathNode.js';\n\nclass NormalNode extends Node {\n\n\tstatic GEOMETRY = 'geometry';\n\tstatic LOCAL = 'local';\n\tstatic WORLD = 'world';\n\tstatic VIEW = 'view';\n\n\tconstructor( scope = NormalNode.LOCAL ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis.scope = scope;\n\n\t}\n\n\tgetHash( /*builder*/ ) {\n\n\t\treturn `normal-${this.scope}`;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst scope = this.scope;\n\n\t\tlet outputNode = null;\n\n\t\tif ( scope === NormalNode.GEOMETRY ) {\n\n\t\t\toutputNode = new AttributeNode( 'normal', 'vec3' );\n\n\t\t} else if ( scope === NormalNode.LOCAL ) {\n\n\t\t\toutputNode = new VaryingNode( new NormalNode( NormalNode.GEOMETRY ) );\n\n\t\t} else if ( scope === NormalNode.VIEW ) {\n\n\t\t\tconst vertexNormalNode = new OperatorNode( '*', new ModelNode( ModelNode.NORMAL_MATRIX ), new NormalNode( NormalNode.LOCAL ) );\n\t\t\toutputNode = new MathNode( MathNode.NORMALIZE, new VaryingNode( vertexNormalNode ) );\n\n\t\t} else if ( scope === NormalNode.WORLD ) {\n\n\t\t\t// To use INVERSE_TRANSFORM_DIRECTION only inverse the param order like this: MathNode( ..., Vector, Matrix );\n\t\t\tconst vertexNormalNode = new MathNode( MathNode.TRANSFORM_DIRECTION, new NormalNode( NormalNode.VIEW ), new CameraNode( CameraNode.VIEW_MATRIX ) );\n\t\t\toutputNode = new MathNode( MathNode.NORMALIZE, new VaryingNode( vertexNormalNode ) );\n\n\t\t}\n\n\t\treturn outputNode.build( builder );\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.scope = this.scope;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.scope = data.scope;\n\n\t}\n\n}\n\nexport default NormalNode;\n", "import Node from '../core/Node.js';\n\nclass PointUVNode extends Node {\n\n\tconstructor() {\n\n\t\tsuper( 'vec2' );\n\n\t\tthis.isPointUVNode = true;\n\n\t}\n\n\tgenerate( /*builder*/ ) {\n\n\t\treturn 'vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )';\n\n\t}\n\n}\n\nexport default PointUVNode;\n", "import BufferNode from './BufferNode.js';\n\nclass StorageBufferNode extends BufferNode {\n\n\tconstructor( value, bufferType, bufferCount = 0 ) {\n\n\t\tsuper( value, bufferType, bufferCount );\n\n\t\tthis.isStorageBufferNode = true;\n\n\t}\n\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'storageBuffer';\n\n\t}\n\n}\n\nexport default StorageBufferNode;\n", "import ReferenceNode from './ReferenceNode.js';\n\nclass UserDataNode extends ReferenceNode {\n\n\tconstructor( property, inputType, userData = null ) {\n\n\t\tsuper( property, inputType, userData );\n\n\t\tthis.userData = userData;\n\n\t}\n\n\tupdate( frame ) {\n\n\t\tthis.object = this.userData !== null ? this.userData : frame.object.userData;\n\n\t\tsuper.update( frame );\n\n\t}\n\n}\n\nexport default UserDataNode;\n", "import Node from '../core/Node.js';\n\nclass FrontFacingNode extends Node {\n\n\tconstructor() {\n\n\t\tsuper( 'bool' );\n\n\t\tthis.isFrontFacingNode = true;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\treturn builder.getFrontFacing();\n\n\t}\n\n}\n\nexport default FrontFacingNode;\n", "import Node from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\n\nclass ComputeNode extends Node {\n\n\tconstructor( computeNode, count, workgroupSize = [ 64 ] ) {\n\n\t\tsuper( 'void' );\n\n\t\tthis.isComputeNode = true;\n\n\t\tthis.computeNode = computeNode;\n\n\t\tthis.count = count;\n\t\tthis.workgroupSize = workgroupSize;\n\t\tthis.dispatchCount = 0;\n\n\t\tthis.updateType = NodeUpdateType.Object;\n\n\t\tthis.updateDispatchCount();\n\n\t}\n\n\tupdateDispatchCount() {\n\n\t\tconst { count, workgroupSize } = this;\n\n\t\tlet size = workgroupSize[ 0 ];\n\n\t\tfor ( let i = 1; i < workgroupSize.length; i ++ )\n\t\t\tsize *= workgroupSize[ i ];\n\n\t\tthis.dispatchCount = Math.ceil( count / size );\n\n\t}\n\n\tonInit() { }\n\n\tupdate( { renderer } ) {\n\n\t\trenderer.compute( this );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst { shaderStage } = builder;\n\n\t\tif ( shaderStage === 'compute' ) {\n\n\t\t\tconst snippet = this.computeNode.build( builder, 'void' );\n\n\t\t\tif ( snippet !== '' ) {\n\n\t\t\t\tbuilder.addFlowCode( snippet );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport default ComputeNode;\n", "import Node from '../core/Node.js';\nimport PropertyNode from '../core/PropertyNode.js';\nimport ContextNode from '../core/ContextNode.js';\n\nclass CondNode extends Node {\n\n\tconstructor( condNode, ifNode, elseNode ) {\n\n\t\tsuper();\n\n\t\tthis.condNode = condNode;\n\n\t\tthis.ifNode = ifNode;\n\t\tthis.elseNode = elseNode;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst ifType = this.ifNode.getNodeType( builder );\n\t\tconst elseType = this.elseNode.getNodeType( builder );\n\n\t\tif ( builder.getTypeLength( elseType ) > builder.getTypeLength( ifType ) ) {\n\n\t\t\treturn elseType;\n\n\t\t}\n\n\t\treturn ifType;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst type = this.getNodeType( builder );\n\n\t\tconst context = { tempWrite: false };\n\t\tconst nodeProperty = new PropertyNode( null, type ).build( builder );\n\n\t\tconst nodeSnippet = new ContextNode( this.condNode/*, context*/ ).build( builder, 'bool' ),\n\t\t\tifSnippet = new ContextNode( this.ifNode, context ).build( builder, type ),\n\t\t\telseSnippet = new ContextNode( this.elseNode, context ).build( builder, type );\n\n\t\tbuilder.addFlowCode( `if ( ${nodeSnippet} ) {\n\n\\t\\t${nodeProperty} = ${ifSnippet};\n\n\\t} else {\n\n\\t\\t${nodeProperty} = ${elseSnippet};\n\n\\t}` );\n\n\t\treturn nodeProperty;\n\n\t}\n\n}\n\nexport default CondNode;\n", "import TempNode from '../core/Node.js';\n\nclass ArrayElementNode extends TempNode {\n\n\tconstructor( node, indexNode ) {\n\n\t\tsuper();\n\n\t\tthis.node = node;\n\t\tthis.indexNode = indexNode;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn this.node.getNodeType( builder );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst nodeSnippet = this.node.build( builder );\n\t\tconst indexSnippet = this.indexNode.build( builder, 'uint' );\n\n\t\treturn `${nodeSnippet}[ ${indexSnippet} ]`;\n\n\t}\n\n}\n\nexport default ArrayElementNode;\n", "import Node from '../core/Node.js';\n\nclass ConvertNode extends Node {\n\n\tconstructor( node, convertTo ) {\n\n\t\tsuper();\n\n\t\tthis.node = node;\n\t\tthis.convertTo = convertTo;\n\n\t}\n\n\tgetNodeType( /*builder*/ ) {\n\n\t\treturn this.convertTo;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst convertTo = this.convertTo;\n\t\tconst node = this.node;\n\t\tconst type = this.getNodeType( builder );\n\n\t\tlet snippet = null;\n\n\t\tif ( builder.isReference( convertTo ) === false ) {\n\n\t\t\tconst nodeSnippet = node.build( builder, convertTo );\n\n\t\t\tsnippet = builder.format( nodeSnippet, type, convertTo );\n\n\t\t} else {\n\n\t\t\tsnippet = node.build( builder, convertTo );\n\n\t\t}\n\n\t\treturn builder.format( snippet, type, output );\n\n\t}\n\n}\n\nexport default ConvertNode;\n", "import TempNode from '../core/Node.js';\n\nclass JoinNode extends TempNode {\n\n\tconstructor( nodes = [] ) {\n\n\t\tsuper();\n\n\t\tthis.nodes = nodes;\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\treturn builder.getTypeFromLength( this.nodes.reduce( ( count, cur ) => count + builder.getTypeLength( cur.getNodeType( builder ) ), 0 ) );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getNodeType( builder );\n\t\tconst nodes = this.nodes;\n\n\t\tconst snippetValues = [];\n\n\t\tfor ( const input of nodes ) {\n\n\t\t\tconst inputSnippet = input.build( builder );\n\n\t\t\tsnippetValues.push( inputSnippet );\n\n\t\t}\n\n\t\tconst snippet = `${ builder.getType( type ) }( ${ snippetValues.join( ', ' ) } )`;\n\n\t\treturn builder.format( snippet, type, output );\n\n\t}\n\n}\n\nexport default JoinNode;\n", "import InputNode from './InputNode.js';\n\nclass ConstNode extends InputNode {\n\n\tconstructor( value, nodeType = null ) {\n\n\t\tsuper( value, nodeType );\n\n\t\tthis.isConstNode = true;\n\n\t}\n\n\tgenerateConst( builder ) {\n\n\t\treturn builder.getConst( this.getNodeType( builder ), this.value );\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst type = this.getNodeType( builder );\n\n\t\treturn builder.format( this.generateConst( builder ), type, output );\n\n\t}\n\n}\n\nexport default ConstNode;\n", "import ArrayElementNode from '../utils/ArrayElementNode.js';\nimport ConvertNode from '../utils/ConvertNode.js';\nimport JoinNode from '../utils/JoinNode.js';\nimport SplitNode from '../utils/SplitNode.js';\nimport ConstNode from '../core/ConstNode.js';\nimport { getValueFromType } from '../core/NodeUtils.js';\n\nconst shaderNodeHandler = {\n\n\tconstruct( NodeClosure, params ) {\n\n\t\tconst inputs = params.shift();\n\n\t\treturn NodeClosure( nodeObjects( inputs ), ...params );\n\n\t},\n\n\tget: function ( node, prop ) {\n\n\t\tif ( typeof prop === 'string' && node[ prop ] === undefined ) {\n\n\t\t\tif ( /^[xyzwrgbastpq]{1,4}$/.test( prop ) === true ) {\n\n\t\t\t\t// accessing properties ( swizzle )\n\n\t\t\t\tprop = prop\n\t\t\t\t\t.replace( /r|s/g, 'x' )\n\t\t\t\t\t.replace( /g|t/g, 'y' )\n\t\t\t\t\t.replace( /b|p/g, 'z' )\n\t\t\t\t\t.replace( /a|q/g, 'w' );\n\n\t\t\t\treturn nodeObject( new SplitNode( node, prop ) );\n\n\t\t\t} else if ( /^\\d+$/.test( prop ) === true ) {\n\n\t\t\t\t// accessing array\n\n\t\t\t\treturn nodeObject( new ArrayElementNode( node, new ConstNode( Number( prop ), 'uint' ) ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn node[ prop ];\n\n\t}\n\n};\n\nconst nodeObjectsCacheMap = new WeakMap();\n\nconst ShaderNodeObject = function ( obj ) {\n\n\tconst type = typeof obj;\n\n\tif ( ( type === 'number' ) || ( type === 'boolean' ) ) {\n\n\t\treturn nodeObject( getAutoTypedConstNode( obj ) );\n\n\t} else if ( type === 'object' ) {\n\n\t\tif ( obj?.isNode === true ) {\n\n\t\t\tlet nodeObject = nodeObjectsCacheMap.get( obj );\n\n\t\t\tif ( nodeObject === undefined ) {\n\n\t\t\t\tnodeObject = new Proxy( obj, shaderNodeHandler );\n\t\t\t\tnodeObjectsCacheMap.set( obj, nodeObject );\n\t\t\t\tnodeObjectsCacheMap.set( nodeObject, nodeObject );\n\n\t\t\t}\n\n\t\t\treturn nodeObject;\n\n\t\t}\n\n\t}\n\n\treturn obj;\n\n};\n\nconst ShaderNodeObjects = function ( objects ) {\n\n\tfor ( const name in objects ) {\n\n\t\tobjects[ name ] = nodeObject( objects[ name ] );\n\n\t}\n\n\treturn objects;\n\n};\n\nconst ShaderNodeArray = function ( array ) {\n\n\tconst len = array.length;\n\n\tfor ( let i = 0; i < len; i ++ ) {\n\n\t\tarray[ i ] = nodeObject( array[ i ] );\n\n\t}\n\n\treturn array;\n\n};\n\nconst ShaderNodeProxy = function ( NodeClass, scope = null, factor = null ) {\n\n\tif ( scope === null ) {\n\n\t\treturn ( ...params ) => {\n\n\t\t\treturn nodeObject( new NodeClass( ...nodeArray( params ) ) );\n\n\t\t};\n\n\t} else if ( factor === null ) {\n\n\t\treturn ( ...params ) => {\n\n\t\t\treturn nodeObject( new NodeClass( scope, ...nodeArray( params ) ) );\n\n\t\t};\n\n\t} else {\n\n\t\tfactor = nodeObject( factor );\n\n\t\treturn ( ...params ) => {\n\n\t\t\treturn nodeObject( new NodeClass( scope, ...nodeArray( params ), factor ) );\n\n\t\t};\n\n\t}\n\n};\n\nconst ShaderNodeImmutable = function ( NodeClass, ...params ) {\n\n\treturn nodeObject( new NodeClass( ...nodeArray( params ) ) );\n\n};\n\nconst ShaderNodeScript = function ( jsFunc ) {\n\n\t// @TODO: Move this to Node extended class\n\n\tconst self = {\n\n\t\tbuild: ( builder ) => {\n\n\t\t\tself.call( {}, builder );\n\n\t\t\treturn '';\n\n\t\t},\n\n\t\tcall: ( inputs, builder ) => {\n\n\t\t\tinputs = nodeObjects( inputs );\n\n\t\t\treturn nodeObject( jsFunc( inputs, builder ) );\n\n\t\t}\n\n\t};\n\n\treturn self;\n\n};\n\nexport const ShaderNode = new Proxy( ShaderNodeScript, shaderNodeHandler );\n\nexport const nodeObject = ( val ) => /* new */ ShaderNodeObject( val );\nexport const nodeObjects = ( val ) => new ShaderNodeObjects( val );\nexport const nodeArray = ( val ) => new ShaderNodeArray( val );\nexport const nodeProxy = ( ...val ) => new ShaderNodeProxy( ...val );\nexport const nodeImmutable = ( ...val ) => new ShaderNodeImmutable( ...val );\n\nconst bools = [ false, true ];\nconst uints = [ 0, 1, 2, 3 ];\nconst ints = [ - 1, - 2 ];\nconst floats = [ 0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / ( Math.PI * 2 ), Math.PI / 2 ];\n\nconst boolsCacheMap = new Map();\nfor ( const bool of bools ) boolsCacheMap.set( bool, new ConstNode( bool ) );\n\nconst uintsCacheMap = new Map();\nfor ( const uint of uints ) uintsCacheMap.set( uint, new ConstNode( uint, 'uint' ) );\n\nconst intsCacheMap = new Map( [ ...uintsCacheMap ].map( el => new ConstNode( el.value, 'int' ) ) );\nfor ( const int of ints ) intsCacheMap.set( int, new ConstNode( int, 'int' ) );\n\nconst floatsCacheMap = new Map( [ ...intsCacheMap ].map( el => new ConstNode( el.value ) ) );\nfor ( const float of floats ) floatsCacheMap.set( float, new ConstNode( float ) );\nfor ( const float of floats ) floatsCacheMap.set( - float, new ConstNode( - float ) );\n\nexport const cacheMaps = { bool: boolsCacheMap, uint: uintsCacheMap, ints: intsCacheMap, float: floatsCacheMap };\n\nconst constNodesCacheMap = new Map( [ ...boolsCacheMap, ...floatsCacheMap ] );\n\nconst getAutoTypedConstNode = ( value ) => {\n\n\tif ( constNodesCacheMap.has( value ) ) {\n\n\t\treturn constNodesCacheMap.get( value );\n\n\t} else if ( value.isNode === true ) {\n\n\t\treturn value;\n\n\t} else {\n\n\t\treturn new ConstNode( value );\n\n\t}\n\n};\n\nexport const ConvertType = function ( type, cacheMap = null ) {\n\n\treturn ( ...params ) => {\n\n\t\tif ( params.length === 0 ) {\n\n\t\t\treturn nodeObject( new ConstNode( getValueFromType( type ), type ) );\n\n\t\t} else {\n\n\t\t\tif ( type === 'color' && params[ 0 ].isNode !== true ) {\n\n\t\t\t\tparams = [ getValueFromType( type, ...params ) ];\n\n\t\t\t}\n\n\t\t\tif ( params.length === 1 && cacheMap !== null && cacheMap.has( params[ 0 ] ) ) {\n\n\t\t\t\treturn cacheMap.get( params[ 0 ] );\n\n\t\t\t}\n\n\t\t\tconst nodes = params.map( getAutoTypedConstNode );\n\n\t\t\tif ( nodes.length === 1 ) {\n\n\t\t\t\treturn nodeObject( nodes[ 0 ].nodeType === type ? nodes[ 0 ] : new ConvertNode( nodes[ 0 ], type ) );\n\n\t\t\t}\n\n\t\t\treturn nodeObject( new ConvertNode( new JoinNode( nodes ), type ) );\n\n\t\t}\n\n\t};\n\n};\n\nexport const getConstNodeType = ( value ) => value.nodeType || value.convertTo || ( typeof value === 'string' ? value : null );\n", "// core\n//import ArrayUniformNode from '../core/ArrayUniformNode.js';\nimport AttributeNode from '../core/AttributeNode.js';\nimport BypassNode from '../core/BypassNode.js';\nimport CodeNode from '../core/CodeNode.js';\nimport ContextNode from '../core/ContextNode.js';\nimport ExpressionNode from '../core/ExpressionNode.js';\nimport FunctionCallNode from '../core/FunctionCallNode.js';\nimport FunctionNode from '../core/FunctionNode.js';\nimport InstanceIndexNode from '../core/InstanceIndexNode.js';\nimport PropertyNode from '../core/PropertyNode.js';\nimport UniformNode from '../core/UniformNode.js';\nimport VarNode from '../core/VarNode.js';\nimport VaryingNode from '../core/VaryingNode.js';\n\n// accessors\nimport BufferNode from '../accessors/BufferNode.js';\nimport CameraNode from '../accessors/CameraNode.js';\nimport MaterialNode from '../accessors/MaterialNode.js';\nimport MaterialReferenceNode from '../accessors/MaterialReferenceNode.js';\nimport ModelViewProjectionNode from '../accessors/ModelViewProjectionNode.js';\nimport NormalNode from '../accessors/NormalNode.js';\nimport ModelNode from '../accessors/ModelNode.js';\nimport PointUVNode from '../accessors/PointUVNode.js';\nimport PositionNode from '../accessors/PositionNode.js';\nimport ReferenceNode from '../accessors/ReferenceNode.js';\nimport StorageBufferNode from '../accessors/StorageBufferNode.js';\nimport TextureNode from '../accessors/TextureNode.js';\nimport UserDataNode from '../accessors/UserDataNode.js';\nimport UVNode from '../accessors/UVNode.js';\n\n// display\nimport FrontFacingNode from '../display/FrontFacingNode.js';\n\n// gpgpu\nimport ComputeNode from '../gpgpu/ComputeNode.js';\n\n// math\nimport MathNode from '../math/MathNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport CondNode from '../math/CondNode.js';\n\n// utils\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\nimport ConvertNode from '../utils/ConvertNode.js';\n\n// shader node utils\nimport { ShaderNode, nodeObject, nodeObjects, nodeArray, nodeProxy, nodeImmutable, ConvertType, getConstNodeType, cacheMaps } from './ShaderNode.js';\n\n// shader node base\n\nexport { ShaderNode, nodeObject, nodeObjects, nodeArray, nodeProxy, nodeImmutable };\n\nexport const color = new ConvertType( 'color' );\n\nexport const float = new ConvertType( 'float', cacheMaps.float );\nexport const int = new ConvertType( 'int', cacheMaps.int );\nexport const uint = new ConvertType( 'uint', cacheMaps.uint );\nexport const bool = new ConvertType( 'bool', cacheMaps.bool );\n\nexport const vec2 = new ConvertType( 'vec2' );\nexport const ivec2 = new ConvertType( 'ivec2' );\nexport const uvec2 = new ConvertType( 'uvec2' );\nexport const bvec2 = new ConvertType( 'bvec2' );\n\nexport const vec3 = new ConvertType( 'vec3' );\nexport const ivec3 = new ConvertType( 'ivec3' );\nexport const uvec3 = new ConvertType( 'uvec3' );\nexport const bvec3 = new ConvertType( 'bvec3' );\n\nexport const vec4 = new ConvertType( 'vec4' );\nexport const ivec4 = new ConvertType( 'ivec4' );\nexport const uvec4 = new ConvertType( 'uvec4' );\nexport const bvec4 = new ConvertType( 'bvec4' );\n\nexport const mat3 = new ConvertType( 'mat3' );\nexport const imat3 = new ConvertType( 'imat3' );\nexport const umat3 = new ConvertType( 'umat3' );\nexport const bmat3 = new ConvertType( 'bmat3' );\n\nexport const mat4 = new ConvertType( 'mat4' );\nexport const imat4 = new ConvertType( 'imat4' );\nexport const umat4 = new ConvertType( 'umat4' );\nexport const bmat4 = new ConvertType( 'bmat4' );\n\n// core\n\n// @TODO: ArrayUniformNode\n\nexport const func = ( code, includes ) => {\n\n\tconst node = nodeObject( new FunctionNode( code, includes ) );\n\n\tconst call = node.call.bind( node );\n\tnode.call = ( ...params ) => nodeObject( call( params.length > 1 || params[ 0 ]?.isNode === true ? nodeArray( params ) : nodeObjects( params[ 0 ] ) ) );\n\n\treturn node;\n\n};\n\nexport const uniform = ( nodeOrType ) => {\n\n\tconst nodeType = getConstNodeType( nodeOrType );\n\n\t// @TODO: get ConstNode from .traverse() in the future\n\tconst value = nodeOrType.isNode === true ? nodeOrType.node?.value || nodeOrType.value : nodeOrType;\n\n\treturn nodeObject( new UniformNode( value, nodeType ) );\n\n};\n\nexport const fn = ( code, includes ) => func( code, includes ).call;\n\nexport const attribute = ( name, nodeType ) => nodeObject( new AttributeNode( name, nodeType ) );\nexport const property = ( name, nodeOrType ) => nodeObject( new PropertyNode( name, getConstNodeType( nodeOrType ) ) );\n\nexport const bypass = nodeProxy( BypassNode );\nexport const code = nodeProxy( CodeNode );\nexport const context = nodeProxy( ContextNode );\nexport const expression = nodeProxy( ExpressionNode );\nexport const call = nodeProxy( FunctionCallNode );\nexport const instanceIndex = nodeImmutable( InstanceIndexNode );\nexport const label = nodeProxy( VarNode );\nexport const temp = label;\nexport const varying = nodeProxy( VaryingNode );\n\n// accesors\n\nexport const buffer = ( value, nodeOrType, count ) => nodeObject( new BufferNode( value, getConstNodeType( nodeOrType ), count ) );\nexport const storage = ( value, nodeOrType, count ) => nodeObject( new StorageBufferNode( value, getConstNodeType( nodeOrType ), count ) );\n\nexport const cameraProjectionMatrix = nodeImmutable( CameraNode, CameraNode.PROJECTION_MATRIX );\nexport const cameraViewMatrix = nodeImmutable( CameraNode, CameraNode.VIEW_MATRIX );\nexport const cameraNormalMatrix = nodeImmutable( CameraNode, CameraNode.NORMAL_MATRIX );\nexport const cameraWorldMatrix = nodeImmutable( CameraNode, CameraNode.WORLD_MATRIX );\nexport const cameraPosition = nodeImmutable( CameraNode, CameraNode.POSITION );\n\nexport const materialAlphaTest = nodeImmutable( MaterialNode, MaterialNode.ALPHA_TEST );\nexport const materialColor = nodeImmutable( MaterialNode, MaterialNode.COLOR );\nexport const materialEmissive = nodeImmutable( MaterialNode, MaterialNode.EMISSIVE );\nexport const materialOpacity = nodeImmutable( MaterialNode, MaterialNode.OPACITY );\n//export const materialSpecular = nodeImmutable( MaterialNode, MaterialNode.SPECULAR );\nexport const materialRoughness = nodeImmutable( MaterialNode, MaterialNode.ROUGHNESS );\nexport const materialMetalness = nodeImmutable( MaterialNode, MaterialNode.METALNESS );\nexport const materialRotation = nodeImmutable( MaterialNode, MaterialNode.ROTATION );\n\nexport const diffuseColor = nodeImmutable( PropertyNode, 'DiffuseColor', 'vec4' );\nexport const roughness = nodeImmutable( PropertyNode, 'Roughness', 'float' );\nexport const metalness = nodeImmutable( PropertyNode, 'Metalness', 'float' );\nexport const alphaTest = nodeImmutable( PropertyNode, 'AlphaTest', 'float' );\nexport const specularColor = nodeImmutable( PropertyNode, 'SpecularColor', 'color' );\n\nexport const reference = ( name, nodeOrType, object ) => nodeObject( new ReferenceNode( name, getConstNodeType( nodeOrType ), object ) );\nexport const materialReference = ( name, nodeOrType, material ) => nodeObject( new MaterialReferenceNode( name, getConstNodeType( nodeOrType ), material ) );\nexport const userData = ( name, inputType, userData ) => nodeObject( new UserDataNode( name, inputType, userData ) );\n\nexport const modelViewProjection = nodeProxy( ModelViewProjectionNode );\n\nexport const normalGeometry = nodeImmutable( NormalNode, NormalNode.GEOMETRY );\nexport const normalLocal = nodeImmutable( NormalNode, NormalNode.LOCAL );\nexport const normalWorld = nodeImmutable( NormalNode, NormalNode.WORLD );\nexport const normalView = nodeImmutable( NormalNode, NormalNode.VIEW );\nexport const transformedNormalView = nodeImmutable( VarNode, normalView, 'TransformedNormalView' );\n\nexport const modelViewMatrix = nodeImmutable( ModelNode, ModelNode.VIEW_MATRIX );\nexport const modelNormalMatrix = nodeImmutable( ModelNode, ModelNode.NORMAL_MATRIX );\nexport const modelWorldMatrix = nodeImmutable( ModelNode, ModelNode.WORLD_MATRIX );\nexport const modelPosition = nodeImmutable( ModelNode, ModelNode.POSITION );\nexport const modelViewPosition = nodeImmutable( ModelNode, ModelNode.VIEW_POSITION );\n\nexport const positionGeometry = nodeImmutable( PositionNode, PositionNode.GEOMETRY );\nexport const positionLocal = nodeImmutable( PositionNode, PositionNode.LOCAL );\nexport const positionWorld = nodeImmutable( PositionNode, PositionNode.WORLD );\nexport const positionView = nodeImmutable( PositionNode, PositionNode.VIEW );\nexport const positionViewDirection = nodeImmutable( PositionNode, PositionNode.VIEW_DIRECTION );\n\nexport const texture = nodeProxy( TextureNode );\nexport const sampler = ( texture ) => nodeObject( new ConvertNode( texture.isNode === true ? texture : new TextureNode( texture ), 'sampler' ) );\nexport const uv = ( ...params ) => nodeObject( new UVNode( ...params ) );\nexport const pointUV = nodeImmutable( PointUVNode );\n\n// gpgpu\n\nexport const compute = ( node, count, workgroupSize ) => nodeObject( new ComputeNode( nodeObject( node ), count, workgroupSize ) );\n\n// math\n\nexport const EPSILON = float( 1e-6 );\nexport const INFINITY = float( 1e6 );\n\nexport const cond = nodeProxy( CondNode );\n\nexport const add = nodeProxy( OperatorNode, '+' );\nexport const sub = nodeProxy( OperatorNode, '-' );\nexport const mul = nodeProxy( OperatorNode, '*' );\nexport const div = nodeProxy( OperatorNode, '/' );\nexport const remainder = nodeProxy( OperatorNode, '%' );\nexport const equal = nodeProxy( OperatorNode, '==' );\nexport const assign = nodeProxy( OperatorNode, '=' );\nexport const lessThan = nodeProxy( OperatorNode, '<' );\nexport const greaterThan = nodeProxy( OperatorNode, '>' );\nexport const lessThanEqual = nodeProxy( OperatorNode, '<=' );\nexport const greaterThanEqual = nodeProxy( OperatorNode, '>=' );\nexport const and = nodeProxy( OperatorNode, '&&' );\nexport const or = nodeProxy( OperatorNode, '||' );\nexport const xor = nodeProxy( OperatorNode, '^^' );\nexport const bitAnd = nodeProxy( OperatorNode, '&' );\nexport const bitOr = nodeProxy( OperatorNode, '|' );\nexport const bitXor = nodeProxy( OperatorNode, '^' );\nexport const shiftLeft = nodeProxy( OperatorNode, '<<' );\nexport const shiftRight = nodeProxy( OperatorNode, '>>' );\n\nexport const radians = nodeProxy( MathNode, MathNode.RADIANS );\nexport const degrees = nodeProxy( MathNode, MathNode.DEGREES );\nexport const exp = nodeProxy( MathNode, MathNode.EXP );\nexport const exp2 = nodeProxy( MathNode, MathNode.EXP2 );\nexport const log = nodeProxy( MathNode, MathNode.LOG );\nexport const log2 = nodeProxy( MathNode, MathNode.LOG2 );\nexport const sqrt = nodeProxy( MathNode, MathNode.SQRT );\nexport const inversesqrt = nodeProxy( MathNode, MathNode.INVERSE_SQRT );\nexport const floor = nodeProxy( MathNode, MathNode.FLOOR );\nexport const ceil = nodeProxy( MathNode, MathNode.CEIL );\nexport const normalize = nodeProxy( MathNode, MathNode.NORMALIZE );\nexport const fract = nodeProxy( MathNode, MathNode.FRACT );\nexport const sin = nodeProxy( MathNode, MathNode.SIN );\nexport const cos = nodeProxy( MathNode, MathNode.COS );\nexport const tan = nodeProxy( MathNode, MathNode.TAN );\nexport const asin = nodeProxy( MathNode, MathNode.ASIN );\nexport const acos = nodeProxy( MathNode, MathNode.ACOS );\nexport const atan = nodeProxy( MathNode, MathNode.ATAN );\nexport const abs = nodeProxy( MathNode, MathNode.ABS );\nexport const sign = nodeProxy( MathNode, MathNode.SIGN );\nexport const length = nodeProxy( MathNode, MathNode.LENGTH );\nexport const negate = nodeProxy( MathNode, MathNode.NEGATE );\nexport const invert = nodeProxy( MathNode, MathNode.INVERT );\nexport const dFdx = nodeProxy( MathNode, MathNode.DFDX );\nexport const dFdy = nodeProxy( MathNode, MathNode.DFDY );\nexport const saturate = nodeProxy( MathNode, MathNode.SATURATE );\nexport const round = nodeProxy( MathNode, MathNode.ROUND );\n\nexport const atan2 = nodeProxy( MathNode, MathNode.ATAN2 );\nexport const min = nodeProxy( MathNode, MathNode.MIN );\nexport const max = nodeProxy( MathNode, MathNode.MAX );\nexport const mod = nodeProxy( MathNode, MathNode.MOD );\nexport const step = nodeProxy( MathNode, MathNode.STEP );\nexport const reflect = nodeProxy( MathNode, MathNode.REFLECT );\nexport const distance = nodeProxy( MathNode, MathNode.DISTANCE );\nexport const dot = nodeProxy( MathNode, MathNode.DOT );\nexport const cross = nodeProxy( MathNode, MathNode.CROSS );\nexport const pow = nodeProxy( MathNode, MathNode.POW );\nexport const pow2 = nodeProxy( MathNode, MathNode.POW, 2 );\nexport const pow3 = nodeProxy( MathNode, MathNode.POW, 3 );\nexport const pow4 = nodeProxy( MathNode, MathNode.POW, 4 );\nexport const transformDirection = nodeProxy( MathNode, MathNode.TRANSFORM_DIRECTION );\n\nexport const mix = nodeProxy( MathNode, MathNode.MIX );\nexport const clamp = nodeProxy( MathNode, MathNode.CLAMP );\nexport const refract = nodeProxy( MathNode, MathNode.REFRACT );\nexport const smoothstep = nodeProxy( MathNode, MathNode.SMOOTHSTEP );\nexport const faceforward = nodeProxy( MathNode, MathNode.FACEFORWARD );\n\n// display\n\nexport const frontFacing = nodeImmutable( FrontFacingNode );\nexport const faceDirection = sub( mul( float( frontFacing ), 2 ), 1 );\n\n// lighting\n\n\n// utils\n\nexport const element = nodeProxy( ArrayElementNode );\n\n// miscellaneous\n\nexport const dotNV = saturate( dot( transformedNormalView, positionViewDirection ) );\nexport const transformedNormalWorld = normalize( transformDirection( transformedNormalView, cameraViewMatrix ) );\n"],
  "mappings": "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",
  "names": ["property", "property", "data", "attribute", "code", "context", "code", "property", "property", "property", "texture", "property", "userData", "context", "nodeObject", "bool", "uint", "int", "float", "code", "call", "userData", "texture"]
}
